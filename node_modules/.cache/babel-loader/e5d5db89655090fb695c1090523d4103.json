{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordApp/CrosswordApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Crossword from '../Crossword/Crossword.jsx';\nimport api from '../../libs/api.js';\n\nclass CrosswordApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crosswords: []\n    };\n    this.loadCrosswords = this.loadCrosswords.bind(this);\n  }\n\n  async loadCrosswords() {\n    let response;\n    let requestSuccess = false;\n\n    try {\n      console.log('Sending call...');\n      response = await api.getAllCrosswords();\n      console.log(response);\n      requestSuccess = response.status === 200;\n    } catch (error) {\n      requestSuccess = false;\n    }\n\n    if (requestSuccess) {\n      this.setState({\n        crosswords: response.data\n      });\n    }\n  }\n\n  async componentWillMount() {\n    await this.loadCrosswords();\n  }\n\n  render() {\n    const {\n      crosswords\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, crosswords.map(crossword => /*#__PURE__*/React.createElement(Crossword, {\n      api: this.props.api,\n      crossword: crossword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nCrosswordApp.propTypes = {};\nexport default CrosswordApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordApp/CrosswordApp.jsx"],"names":["React","Fragment","Component","PropTypes","Crossword","api","CrosswordApp","constructor","props","state","crosswords","loadCrosswords","bind","response","requestSuccess","console","log","getAllCrosswords","status","error","setState","data","componentWillMount","render","map","crossword","propTypes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;;AAEA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AACjCK,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE;AADH,KAAb;AAIA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACH;;AAED,QAAMD,cAAN,GAAwB;AACpB,QAAIE,QAAJ;AACA,QAAIC,cAAc,GAAG,KAArB;;AACA,QAAI;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAH,MAAAA,QAAQ,GAAG,MAAMR,GAAG,CAACY,gBAAJ,EAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAC,MAAAA,cAAc,GAAGD,QAAQ,CAACK,MAAT,KAAoB,GAArC;AACH,KALD,CAKE,OAAOC,KAAP,EAAc;AACZL,MAAAA,cAAc,GAAG,KAAjB;AACH;;AAED,QAAIA,cAAJ,EAAoB;AAChB,WAAKM,QAAL,CAAc;AACVV,QAAAA,UAAU,EAAEG,QAAQ,CAACQ;AADX,OAAd;AAGH;AACJ;;AAED,QAAMC,kBAAN,GAA4B;AACxB,UAAM,KAAKX,cAAL,EAAN;AACH;;AAEDY,EAAAA,MAAM,GAAI;AACN,UAAM;AAAEb,MAAAA;AAAF,QAAiB,KAAKD,KAA5B;AACA,wBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,UAAU,CAACc,GAAX,CAAeC,SAAS,iBACrB,oBAAC,SAAD;AACI,MAAA,GAAG,EAAE,KAAKjB,KAAL,CAAWH,GADpB;AAEI,MAAA,SAAS,EAAEoB,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,CADJ;AAUH;;AA9CgC;;AAiDrCnB,YAAY,CAACoB,SAAb,GAAyB,EAAzB;AAEA,eAAepB,YAAf","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Crossword from '../Crossword/Crossword.jsx'\nimport api from '../../libs/api.js'\n\nclass CrosswordApp extends Component {\n    constructor (props) {\n        super(props)\n\n        this.state = {\n            crosswords: []\n        }\n\n        this.loadCrosswords = this.loadCrosswords.bind(this)\n    }\n\n    async loadCrosswords () {\n        let response\n        let requestSuccess = false\n        try {\n            console.log('Sending call...')\n            response = await api.getAllCrosswords()\n            console.log(response)\n            requestSuccess = response.status === 200\n        } catch (error) {\n            requestSuccess = false\n        }\n\n        if (requestSuccess) {\n            this.setState({\n                crosswords: response.data\n            })\n        }\n    }\n\n    async componentWillMount () {\n        await this.loadCrosswords()\n    }\n\n    render () {\n        const { crosswords } = this.state\n        return (\n            <Fragment>\n                {crosswords.map(crossword =>\n                    <Crossword\n                        api={this.props.api}\n                        crossword={crossword}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n}\n\nCrosswordApp.propTypes = {}\n\nexport default CrosswordApp"]},"metadata":{},"sourceType":"module"}