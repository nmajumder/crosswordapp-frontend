{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/CrosswordBoardApp.css';\nimport SquareSelection from '../libs/SquareSelection.js';\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx';\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    this.numbered = this.props.crossword.numbered;\n    this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.downClues = this.props.crossword.downClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.clueRefMap = this.props.crossword.clueRefMap;\n    this.acrossClueTop = React.createRef();\n    this.downClueTop = React.createRef();\n    let currentSelection = new SquareSelection();\n    let i = 0;\n\n    while (this.props.crossword.numbered[0][i] === \"_\") {\n      i++;\n    }\n\n    currentSelection.coords = [0, i];\n    currentSelection.direction = \"Across\";\n    this.state = {\n      windowWidth: window.innerWidth,\n      currentSelection: currentSelection,\n      grid: this.props.crossword.grid\n    };\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n    this.acrossClueClicked = this.acrossClueClicked.bind(this);\n    this.downClueClicked = this.downClueClicked.bind(this);\n    this.boardSquareClicked = this.boardSquareClicked.bind(this);\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n    this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this);\n  }\n\n  componentDidUpdate() {\n    console.log(\"Crossword Board App updated...\");\n  }\n\n  componentDidMount() {\n    console.log(\"Crossword Board App is Mounting...\");\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Crossword Board App is Unmounting...\");\n    window.removeEventListener('resize', this.handleWindowResize); // save state of grid\n  }\n\n  handleWindowResize() {\n    this.setState({\n      windowWidth: window.innerWidth\n    });\n  }\n\n  acrossClueClicked(clue) {\n    console.log('Clicked down clue with number: ' + clue.number);\n  }\n\n  downClueClicked(clue) {\n    console.log('Clicked down clue with number: ' + clue.number);\n  }\n\n  boardSquareClicked(square) {\n    if (square.value === \"_\") {\n      return;\n    }\n\n    let selection = this.state.currentSelection;\n\n    if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n      selection.flipDirection();\n    } else {\n      selection.moveTo([square.rowCoord, square.colCoord]);\n    }\n\n    this.setState({\n      currentSelection: selection\n    });\n  }\n\n  getSelectedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    let boardSquare = this.state.grid[coords[0]][coords[1]];\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n\n      for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n        selectedCoordList.push([firstCoords[0], i].toString());\n      }\n    } else {\n      let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n\n      for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n        selectedCoordList.push([i, firstCoords[1]].toString());\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  getSquareBackgroundColor(square, selection, highlightedSquares) {\n    if (square.value === \"_\") return \"black\";\n    let thisSquareKey = [square.rowCoord, square.colCoord].toString();\n\n    if (highlightedSquares.includes(thisSquareKey)) {\n      if (thisSquareKey == selection.coords.toString()) {\n        return this.props.settings.colorScheme.colors[1];\n      } else {\n        return this.props.settings.colorScheme.colors[2];\n      }\n    }\n\n    return \"white\";\n  }\n\n  render() {\n    const {\n      windowWidth,\n      currentSelection,\n      grid\n    } = this.state;\n    let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightedSquares = this.getSelectedSquares(currentSelection);\n    const acrossClue = this.acrossClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum);\n    const downClue = this.downClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum);\n    /*const acrossClueObjs = document.getElementById(\"across-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n    const curAcrossClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum\n    const curAcrossClueInd = this.acrossClues.findIndex(c => c.number === curAcrossClueNum)\n    const acrossScrollTop = acrossClueObjs[curAcrossClueInd].offsetTop - acrossClueObjs[0].offsetTop\n     const downClueObjs = document.getElementById(\"down-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n    const curDownClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum\n    const curDownClueInd = this.downClues.findIndex(c => c.number === curDownClueNum)\n    const downScrollTop = downClueObjs[curDownClueInd].offsetTop - downClueObjs[0].offsetTop*/\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }, row.map((square, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: j,\n      className: \"crossword-square\",\n      onClick: () => {\n        this.boardSquareClicked(square);\n      },\n      style: {\n        width: squarePx,\n        height: squarePx,\n        backgroundColor: this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-number\",\n      style: {\n        fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 41\n      }\n    }, this.numbered[i][j] != \"_\" && this.numbered[i][j] != \"0\" ? this.numbered[i][j] : \"\"), square.value === '?' || square.value === '_' ? '' : square.value))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Across\",\n      clueList: this.acrossClues,\n      selectedClue: acrossClue,\n      isMatchingDirection: currentSelection.direction === 'Across',\n      clueClicked: this.acrossClueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Down\",\n      clueList: this.downClues,\n      selectedClue: downClue,\n      isMatchingDirection: currentSelection.direction === 'Down',\n      clueClicked: this.downClueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  boardWidthPx: PropTypes.number.isRequired,\n  settings: PropTypes.object.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","SquareSelection","CrosswordClueScroll","CrosswordBoardApp","constructor","props","numbered","crossword","acrossClues","sort","c1","c2","number","downClues","clueRefMap","acrossClueTop","createRef","downClueTop","currentSelection","i","coords","direction","state","windowWidth","window","innerWidth","grid","handleWindowResize","bind","acrossClueClicked","downClueClicked","boardSquareClicked","getSelectedSquares","getSquareBackgroundColor","componentDidUpdate","console","log","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","setState","clue","square","value","selection","rowCoord","colCoord","flipDirection","moveTo","boardSquare","selectedCoordList","find","acrossClueNum","firstCoords","wordLen","answerLength","push","toString","downClueNum","highlightedSquares","thisSquareKey","includes","settings","colorScheme","colors","render","clueWidthPx","boardPx","boardWidthPx","boardSize","length","rowPx","squarePx","acrossClue","c","downClue","width","height","map","row","j","backgroundColor","fontSize","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/CrosswordBoardApp.css'\nimport SquareSelection from '../libs/SquareSelection.js'\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx'\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n\n        this.numbered = this.props.crossword.numbered\n        this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.downClues = this.props.crossword.downClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.clueRefMap = this.props.crossword.clueRefMap\n\n        this.acrossClueTop = React.createRef();\n        this.downClueTop = React.createRef();\n        \n        let currentSelection = new SquareSelection()\n        let i = 0\n        while (this.props.crossword.numbered[0][i] === \"_\") {\n            i++\n        }\n        currentSelection.coords = [0,i]\n        currentSelection.direction = \"Across\"\n\n        this.state = {\n            windowWidth: window.innerWidth,\n            currentSelection: currentSelection,\n            grid: this.props.crossword.grid\n        }\n\n        this.handleWindowResize = this.handleWindowResize.bind(this)\n        this.acrossClueClicked = this.acrossClueClicked.bind(this)\n        this.downClueClicked = this.downClueClicked.bind(this)\n        this.boardSquareClicked = this.boardSquareClicked.bind(this)\n\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n        this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this)\n    }\n\n    componentDidUpdate () {\n        console.log(\"Crossword Board App updated...\")\n    }\n\n    componentDidMount () {\n        console.log(\"Crossword Board App is Mounting...\")\n        window.addEventListener('resize', this.handleWindowResize)\n\n    }\n\n    componentWillUnmount () {\n        console.log(\"Crossword Board App is Unmounting...\")\n        window.removeEventListener('resize', this.handleWindowResize)\n\n        // save state of grid\n    }\n\n    handleWindowResize () {\n        this.setState({\n            windowWidth: window.innerWidth\n        })\n    }\n\n    acrossClueClicked (clue) {\n        console.log('Clicked down clue with number: ' + clue.number)\n    }\n\n    downClueClicked (clue) {\n        console.log('Clicked down clue with number: ' + clue.number)\n    }\n\n    boardSquareClicked (square) {\n        if (square.value === \"_\") {\n            return\n        }\n        let selection = this.state.currentSelection\n        if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n            selection.flipDirection()\n        } else {\n            selection.moveTo([square.rowCoord, square.colCoord])\n        }\n        this.setState({\n            currentSelection: selection\n        })\n    }\n\n    getSelectedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        let boardSquare = this.state.grid[coords[0]][coords[1]]\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n                selectedCoordList.push([firstCoords[0],i].toString())\n            }\n        } else {\n            let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n                selectedCoordList.push([i,firstCoords[1]].toString())\n            }\n        }\n        return selectedCoordList\n    }\n\n    getSquareBackgroundColor (square, selection, highlightedSquares) {\n        if (square.value === \"_\") return \"black\"\n        let thisSquareKey = [square.rowCoord, square.colCoord].toString()\n        if (highlightedSquares.includes(thisSquareKey)) {\n            if (thisSquareKey == selection.coords.toString()) {\n                return this.props.settings.colorScheme.colors[1]\n            } else {\n                return this.props.settings.colorScheme.colors[2]\n            }\n        }\n        return \"white\"\n    }\n\n    render () {\n        const { windowWidth, currentSelection, grid } = this.state\n        let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightedSquares = this.getSelectedSquares(currentSelection)\n\n        const acrossClue = this.acrossClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum)\n        const downClue = this.downClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum)\n\n        /*const acrossClueObjs = document.getElementById(\"across-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n        const curAcrossClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum\n        const curAcrossClueInd = this.acrossClues.findIndex(c => c.number === curAcrossClueNum)\n        const acrossScrollTop = acrossClueObjs[curAcrossClueInd].offsetTop - acrossClueObjs[0].offsetTop\n\n        const downClueObjs = document.getElementById(\"down-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n        const curDownClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum\n        const curDownClueInd = this.downClues.findIndex(c => c.number === curDownClueNum)\n        const downScrollTop = downClueObjs[curDownClueInd].offsetTop - downClueObjs[0].offsetTop*/\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( (row, i) =>\n                            <div key={i} style={{height : rowPx}}>\n                                {row.map( (square, j) => \n                                    <div key={j} className={\"crossword-square\"} onClick={() => { this.boardSquareClicked(square) }}\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)}}>\n                                        <div className=\"board-square-number\" \n                                            style={{fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`}}>\n                                            {this.numbered[i][j] != \"_\" && this.numbered[i][j] != \"0\" ? this.numbered[i][j] : \"\"}</div>\n                                        {square.value === '?' || square.value === '_' ? '' : square.value}\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <CrosswordClueScroll \n                            listTitle={\"Across\"}\n                            clueList={this.acrossClues}\n                            selectedClue={acrossClue}\n                            isMatchingDirection={currentSelection.direction === 'Across'}\n                            clueClicked={this.acrossClueClicked}\n                            settings={this.props.settings}/>\n                        <CrosswordClueScroll \n                            listTitle={\"Down\"}\n                            clueList={this.downClues}\n                            selectedClue={downClue}\n                            isMatchingDirection={currentSelection.direction === 'Down'}\n                            clueClicked={this.downClueClicked}\n                            settings={this.props.settings}/>\n                        <CrosswordClueScroll />\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    boardWidthPx: PropTypes.number.isRequired,\n    settings: PropTypes.object.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}