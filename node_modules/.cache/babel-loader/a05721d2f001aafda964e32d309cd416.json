{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/CrosswordBoardApp.css';\nimport SquareSelection from '../libs/SquareSelection.js';\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    let currentSelection = new SquareSelection();\n    let i = 0;\n\n    while (this.props.crossword.numbered[0][i] === \"_\") {\n      i++;\n    }\n\n    currentSelection.coords = [0, i];\n    currentSelection.direction = \"Across\";\n    this.state = {\n      windowWidth: window.innerWidth,\n      currentSelection: currentSelection,\n      grid: this.props.crossword.grid\n    };\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n    this.clueRowClicked = this.clueRowClicked.bind(this);\n    this.boardSquareClicked = this.boardSquareClicked.bind(this);\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n    this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this);\n    this.getClueBackgroundColor = this.getClueBackgroundColor.bind(this);\n    this.getClueBorderColor = this.getClueBorderColor.bind(this);\n  }\n\n  componentDidUpdate() {\n    console.log(\"Crossword Board App updated...\");\n  }\n\n  componentDidMount() {\n    console.log(\"Crossword Board App is Mounting...\");\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Crossword Board App is Unmounting...\");\n    window.removeEventListener('resize', this.handleWindowResize); // save state of grid\n  }\n\n  handleWindowResize() {\n    this.setState({\n      windowWidth: window.innerWidth\n    });\n  }\n\n  clueRowClicked(index, listType) {\n    if (listType === \"Across\") {\n      console.log('Clicked across clue with number: ' + this.state.acrossClues[index].number);\n    } else {\n      console.log('Clicked down clue with number: ' + this.state.downClues[index].number);\n    }\n  }\n\n  boardSquareClicked(square) {\n    if (square.value === \"_\") {\n      return;\n    }\n\n    let selection = this.state.currentSelection;\n\n    if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n      selection.flipDirection();\n    } else {\n      selection.moveTo([square.rowCoord, square.colCoord]);\n    }\n\n    this.setState({\n      currentSelection: selection\n    });\n  }\n\n  getSelectedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    let boardSquare = this.state.grid[coords[0]][coords[1]];\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clue = this.state.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n\n      for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n        selectedCoordList.push([firstCoords[0], i].toString());\n      }\n    } else {\n      let clue = this.state.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n\n      for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n        selectedCoordList.push([i, firstCoords[1]].toString());\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  getSquareBackgroundColor(square, selection, highlightedSquares) {\n    if (square.value === \"_\") return \"black\";\n    let thisSquareKey = [square.rowCoord, square.colCoord].toString();\n\n    if (highlightedSquares.includes(thisSquareKey)) {\n      if (thisSquareKey == selection.coords.toString()) {\n        return this.props.settings.colorScheme.colors[1];\n      } else {\n        return this.props.settings.colorScheme.colors[2];\n      }\n    }\n\n    return \"white\";\n  }\n\n  getClueBackgroundColor(clue, selection) {\n    let selectedSquare = this.state.grid[selection.coords[0]][selection.coords[1]];\n\n    if (clue.direction === \"ACROSS\" && clue.number === selectedSquare.acrossClueNum && selection.direction === \"Across\") {\n      return this.props.settings.colorScheme.colors[2];\n    } else if (clue.direction === \"DOWN\" && clue.number === selectedSquare.downClueNum && selection.direction === \"Down\") {\n      return this.props.settings.colorScheme.colors[2];\n    }\n\n    return \"white\";\n  }\n\n  getClueBorderColor(clue, selection) {\n    let selectedSquare = this.state.grid[selection.coords[0]][selection.coords[1]];\n\n    if (clue.direction === \"ACROSS\" && clue.number === selectedSquare.acrossClueNum || clue.direction === \"DOWN\" && clue.number === selectedSquare.downClueNum) {\n      return this.props.settings.colorScheme.colors[2];\n    }\n\n    return \"white\";\n  }\n\n  render() {\n    const {\n      windowWidth,\n      currentSelection,\n      id,\n      numbered,\n      grid,\n      acrossClues,\n      downClues,\n      clueRefMap\n    } = this.state;\n    let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightedSquares = this.getSelectedSquares(currentSelection);\n    const acrossClueObjs = document.getElementById(\"across-clue-scroll\").getElementsByClassName(\"crossword-clue-row\");\n    const curAcrossClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum;\n    const curAcrossClueInd = acrossClues.findIndex(c => c.number === curAcrossClueNum);\n    const acrossScrollTop = acrossClueObjs[curAcrossClueInd].offsetTop - acrossClueObjs[0].offsetTop;\n    const downClueObjs = document.getElementById(\"down-clue-scroll\").getElementsByClassName(\"crossword-clue-row\");\n    const curDownClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum;\n    const curDownClueInd = downClues.findIndex(c => c.number === curDownClueNum);\n    const downScrollTop = downClueObjs[curDownClueInd].offsetTop - downClueObjs[0].offsetTop;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, row.map((square, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: j,\n      className: \"crossword-square\",\n      onClick: () => {\n        this.boardSquareClicked(square);\n      },\n      style: {\n        width: squarePx,\n        height: squarePx,\n        backgroundColor: this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-number\",\n      style: {\n        fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 41\n      }\n    }, numbered[i][j] != \"_\" && numbered[i][j] != \"0\" ? numbered[i][j] : \"\"), square.value === '?' || square.value === '_' ? '' : square.value))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, \"Across\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      id: \"down-clue-scroll\",\n      scrollTop: acrossScrollTop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }\n    }, acrossClues.map((clue, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"crossword-clue-row\",\n      style: {\n        backgroundColor: this.getClueBackgroundColor(clue, currentSelection),\n        borderLeftColor: this.getClueBorderColor(clue, currentSelection)\n      },\n      onClick: () => {\n        this.clueRowClicked(acrossClues.findIndex(other => other.number === clue.number), \"Across\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 41\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 41\n      }\n    }, clue.text))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    }, \"Down\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      id: \"across-clue-scroll\",\n      scrollTop: downScrollTop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 29\n      }\n    }, downClues.map((clue, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"crossword-clue-row\",\n      style: {\n        backgroundColor: this.getClueBackgroundColor(clue, currentSelection),\n        borderLeftColor: this.getClueBorderColor(clue, currentSelection)\n      },\n      onClick: () => {\n        this.clueRowClicked(downClues.findIndex(other => other.number === clue.number), \"Down\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 41\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 41\n      }\n    }, clue.text))))))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  boardWidthPx: PropTypes.number.isRequired,\n  settings: PropTypes.object.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","SquareSelection","CrosswordBoardApp","constructor","props","currentSelection","i","crossword","numbered","coords","direction","state","windowWidth","window","innerWidth","grid","handleWindowResize","bind","clueRowClicked","boardSquareClicked","getSelectedSquares","getSquareBackgroundColor","getClueBackgroundColor","getClueBorderColor","componentDidUpdate","console","log","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","setState","index","listType","acrossClues","number","downClues","square","value","selection","rowCoord","colCoord","flipDirection","moveTo","boardSquare","selectedCoordList","clue","find","acrossClueNum","firstCoords","wordLen","answerLength","push","toString","downClueNum","highlightedSquares","thisSquareKey","includes","settings","colorScheme","colors","selectedSquare","render","id","clueRefMap","clueWidthPx","boardPx","boardWidthPx","boardSize","length","rowPx","squarePx","acrossClueObjs","document","getElementById","getElementsByClassName","curAcrossClueNum","curAcrossClueInd","findIndex","c","acrossScrollTop","offsetTop","downClueObjs","curDownClueNum","curDownClueInd","downScrollTop","width","height","map","row","j","backgroundColor","fontSize","borderLeftColor","other","text","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/CrosswordBoardApp.css'\nimport SquareSelection from '../libs/SquareSelection.js'\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n        \n        let currentSelection = new SquareSelection()\n        let i = 0\n        while (this.props.crossword.numbered[0][i] === \"_\") {\n            i++\n        }\n        currentSelection.coords = [0,i]\n        currentSelection.direction = \"Across\"\n\n        this.state = {\n            windowWidth: window.innerWidth,\n            currentSelection: currentSelection,\n            grid: this.props.crossword.grid\n        }\n\n        this.handleWindowResize = this.handleWindowResize.bind(this)\n        this.clueRowClicked = this.clueRowClicked.bind(this)\n        this.boardSquareClicked = this.boardSquareClicked.bind(this)\n\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n        this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this)\n        this.getClueBackgroundColor = this.getClueBackgroundColor.bind(this)\n        this.getClueBorderColor = this.getClueBorderColor.bind(this)\n    }\n\n    componentDidUpdate () {\n        console.log(\"Crossword Board App updated...\")\n    }\n\n    componentDidMount () {\n        console.log(\"Crossword Board App is Mounting...\")\n        window.addEventListener('resize', this.handleWindowResize)\n\n    }\n\n    componentWillUnmount () {\n        console.log(\"Crossword Board App is Unmounting...\")\n        window.removeEventListener('resize', this.handleWindowResize)\n\n        // save state of grid\n    }\n\n    handleWindowResize () {\n        this.setState({\n            windowWidth: window.innerWidth\n        })\n    }\n\n    clueRowClicked (index, listType) {\n        if (listType === \"Across\") {\n            console.log('Clicked across clue with number: ' + this.state.acrossClues[index].number)\n        } else {\n            console.log('Clicked down clue with number: ' + this.state.downClues[index].number)\n        }\n    }\n\n    boardSquareClicked (square) {\n        if (square.value === \"_\") {\n            return\n        }\n        let selection = this.state.currentSelection\n        if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n            selection.flipDirection()\n        } else {\n            selection.moveTo([square.rowCoord, square.colCoord])\n        }\n        this.setState({\n            currentSelection: selection\n        })\n    }\n\n    getSelectedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        let boardSquare = this.state.grid[coords[0]][coords[1]]\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clue = this.state.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n                selectedCoordList.push([firstCoords[0],i].toString())\n            }\n        } else {\n            let clue = this.state.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n                selectedCoordList.push([i,firstCoords[1]].toString())\n            }\n        }\n        return selectedCoordList\n    }\n\n    getSquareBackgroundColor (square, selection, highlightedSquares) {\n        if (square.value === \"_\") return \"black\"\n        let thisSquareKey = [square.rowCoord, square.colCoord].toString()\n        if (highlightedSquares.includes(thisSquareKey)) {\n            if (thisSquareKey == selection.coords.toString()) {\n                return this.props.settings.colorScheme.colors[1]\n            } else {\n                return this.props.settings.colorScheme.colors[2]\n            }\n        }\n        return \"white\"\n    }\n    \n    getClueBackgroundColor (clue, selection) {\n        let selectedSquare = this.state.grid[selection.coords[0]][selection.coords[1]]\n        if (clue.direction === \"ACROSS\" && clue.number === selectedSquare.acrossClueNum\n                && selection.direction === \"Across\") {\n            return this.props.settings.colorScheme.colors[2]\n        } else if (clue.direction === \"DOWN\" && clue.number === selectedSquare.downClueNum\n                    && selection.direction === \"Down\") {\n            return this.props.settings.colorScheme.colors[2]\n        }\n        return \"white\"\n    }\n\n    getClueBorderColor (clue, selection) {\n        let selectedSquare = this.state.grid[selection.coords[0]][selection.coords[1]]\n        if ((clue.direction === \"ACROSS\" && clue.number === selectedSquare.acrossClueNum) ||\n                (clue.direction === \"DOWN\" && clue.number === selectedSquare.downClueNum)) {\n            return this.props.settings.colorScheme.colors[2]\n        }   \n        return \"white\"\n    }\n\n    render () {\n        const { windowWidth, currentSelection, id, numbered, grid, acrossClues, downClues, clueRefMap } = this.state\n        let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightedSquares = this.getSelectedSquares(currentSelection)\n\n        const acrossClueObjs = document.getElementById(\"across-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n        const curAcrossClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum\n        const curAcrossClueInd = acrossClues.findIndex(c => c.number === curAcrossClueNum)\n        const acrossScrollTop = acrossClueObjs[curAcrossClueInd].offsetTop - acrossClueObjs[0].offsetTop\n\n        const downClueObjs = document.getElementById(\"down-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n        const curDownClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum\n        const curDownClueInd = downClues.findIndex(c => c.number === curDownClueNum)\n        const downScrollTop = downClueObjs[curDownClueInd].offsetTop - downClueObjs[0].offsetTop\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( (row, i) =>\n                            <div key={i} style={{height : rowPx}}>\n                                {row.map( (square, j) => \n                                    <div key={j} className={\"crossword-square\"} onClick={() => { this.boardSquareClicked(square) }}\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)}}>\n                                        <div className=\"board-square-number\" \n                                            style={{fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`}}>\n                                            {numbered[i][j] != \"_\" && numbered[i][j] != \"0\" ? numbered[i][j] : \"\"}</div>\n                                        {square.value === '?' || square.value === '_' ? '' : square.value}\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <div className=\"crossword-clue-list\">\n                            <div className=\"crossword-clue-list-title\">\n                                Across\n                            </div>\n                            <div className=\"crossword-clue-scroll\" id=\"down-clue-scroll\" scrollTop={acrossScrollTop}>\n                                {acrossClues.map( (clue,i) =>\n                                    <div key={i} className=\"crossword-clue-row\"\n                                        style={{backgroundColor : this.getClueBackgroundColor(clue, currentSelection), \n                                            borderLeftColor : this.getClueBorderColor(clue, currentSelection)}}\n                                        onClick={() => { this.clueRowClicked(acrossClues.findIndex(other => other.number === clue.number), \"Across\") }}>\n                                        <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                                        <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"crossword-clue-list\">\n                            <div className=\"crossword-clue-list-title\">\n                                Down\n                            </div>\n                            <div className=\"crossword-clue-scroll\" id=\"across-clue-scroll\" scrollTop={downScrollTop}>\n                                {downClues.map( (clue,i) =>\n                                    <div key={i} className=\"crossword-clue-row\" \n                                        style={{backgroundColor : this.getClueBackgroundColor(clue, currentSelection), \n                                            borderLeftColor : this.getClueBorderColor(clue, currentSelection)}}\n                                        onClick={() => { this.clueRowClicked(downClues.findIndex(other => other.number === clue.number), \"Down\") }}>\n                                        <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                                        <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    boardWidthPx: PropTypes.number.isRequired,\n    settings: PropTypes.object.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}