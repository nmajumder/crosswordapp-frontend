{"ast":null,"code":"import SquareSelection from \"./SquareSelection\";\n\nclass BoardStatus {\n  constructor(board) {\n    this.selection = new SquareSelection(board.rowCoord, board.colCoord, board.direction);\n    this.grid = [];\n\n    for (let r = 0; r < board.grid.length; r++) {\n      this.grid.push([]);\n\n      for (let c = 0; c < board.grid[r].length; c++) {\n        this.grid[r].push(board.grid[r][c].value);\n      }\n    }\n\n    console.log(\"Initialized grid for board status\");\n    console.log(this.grid);\n  }\n\n  shouldBeUpdated(board) {\n    if (board.selection.rowCoord !== this.selection.coords[0] || board.selection.colCoord !== this.selection.coords[1] || board.selection.direction !== this.selection.direction) {\n      return true;\n    }\n\n    for (let r = 0; r < board.grid.length; r++) {\n      for (let c = 0; c < board.grid[r].length; c++) {\n        if (this.grid[r][c] !== board.grid[r][c].value) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateBoardStatus(board) {\n    this.selection.coords = [board.selection.rowCoord, board.selection.colCoord];\n    this.selection.direction = board.selection.direction;\n\n    for (let r = 0; r < board.grid.length; r++) {\n      for (let c = 0; c < board.grid[r].length; c++) {\n        this.grid[r][c] = board.grid[r][c].value;\n      }\n    }\n  }\n\n}\n\nexport default BoardStatus;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/libs/BoardStatus.js"],"names":["SquareSelection","BoardStatus","constructor","board","selection","rowCoord","colCoord","direction","grid","r","length","push","c","value","console","log","shouldBeUpdated","coords","updateBoardStatus"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,WAAN,CAAkB;AACdC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,SAAKC,SAAL,GAAiB,IAAIJ,eAAJ,CAAoBG,KAAK,CAACE,QAA1B,EAAoCF,KAAK,CAACG,QAA1C,EAAoDH,KAAK,CAACI,SAA1D,CAAjB;AAEA,SAAKC,IAAL,GAAY,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACK,IAAN,CAAWE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,WAAKD,IAAL,CAAUG,IAAV,CAAe,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACK,IAAN,CAAWC,CAAX,EAAcC,MAAlC,EAA0CE,CAAC,EAA3C,EAA+C;AAC3C,aAAKJ,IAAL,CAAUC,CAAV,EAAaE,IAAb,CAAkBR,KAAK,CAACK,IAAN,CAAWC,CAAX,EAAcG,CAAd,EAAiBC,KAAnC;AACH;AACJ;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,IAAjB;AACH;;AAEDQ,EAAAA,eAAe,CAAEb,KAAF,EAAS;AACpB,QAAIA,KAAK,CAACC,SAAN,CAAgBC,QAAhB,KAA6B,KAAKD,SAAL,CAAea,MAAf,CAAsB,CAAtB,CAA7B,IACAd,KAAK,CAACC,SAAN,CAAgBE,QAAhB,KAA6B,KAAKF,SAAL,CAAea,MAAf,CAAsB,CAAtB,CAD7B,IAEAd,KAAK,CAACC,SAAN,CAAgBG,SAAhB,KAA8B,KAAKH,SAAL,CAAeG,SAFjD,EAE4D;AACpD,aAAO,IAAP;AACP;;AAED,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACK,IAAN,CAAWE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACK,IAAN,CAAWC,CAAX,EAAcC,MAAlC,EAA0CE,CAAC,EAA3C,EAA+C;AAC3C,YAAI,KAAKJ,IAAL,CAAUC,CAAV,EAAaG,CAAb,MAAoBT,KAAK,CAACK,IAAN,CAAWC,CAAX,EAAcG,CAAd,EAAiBC,KAAzC,EAAgD;AAC5C,iBAAO,IAAP;AACH;AACJ;AACJ;;AACD,WAAO,KAAP;AACH;;AAEDK,EAAAA,iBAAiB,CAAEf,KAAF,EAAS;AACtB,SAAKC,SAAL,CAAea,MAAf,GAAwB,CAACd,KAAK,CAACC,SAAN,CAAgBC,QAAjB,EAA2BF,KAAK,CAACC,SAAN,CAAgBE,QAA3C,CAAxB;AACA,SAAKF,SAAL,CAAeG,SAAf,GAA2BJ,KAAK,CAACC,SAAN,CAAgBG,SAA3C;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACK,IAAN,CAAWE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACK,IAAN,CAAWC,CAAX,EAAcC,MAAlC,EAA0CE,CAAC,EAA3C,EAA+C;AAC3C,aAAKJ,IAAL,CAAUC,CAAV,EAAaG,CAAb,IAAkBT,KAAK,CAACK,IAAN,CAAWC,CAAX,EAAcG,CAAd,EAAiBC,KAAnC;AACH;AACJ;AACJ;;AAzCa;;AA4ClB,eAAeZ,WAAf","sourcesContent":["import SquareSelection from \"./SquareSelection\"\n\nclass BoardStatus {\n    constructor (board) {\n        this.selection = new SquareSelection(board.rowCoord, board.colCoord, board.direction)\n\n        this.grid = []\n        for (let r = 0; r < board.grid.length; r++) {\n            this.grid.push([])\n            for (let c = 0; c < board.grid[r].length; c++) {\n                this.grid[r].push(board.grid[r][c].value)\n            }\n        }\n        console.log(\"Initialized grid for board status\")\n        console.log(this.grid)\n    }\n\n    shouldBeUpdated (board) {\n        if (board.selection.rowCoord !== this.selection.coords[0] ||\n            board.selection.colCoord !== this.selection.coords[1] ||\n            board.selection.direction !== this.selection.direction) {\n                return true;\n        }\n\n        for (let r = 0; r < board.grid.length; r++) {\n            for (let c = 0; c < board.grid[r].length; c++) {\n                if (this.grid[r][c] !== board.grid[r][c].value) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    updateBoardStatus (board) {\n        this.selection.coords = [board.selection.rowCoord, board.selection.colCoord]\n        this.selection.direction = board.selection.direction\n\n        for (let r = 0; r < board.grid.length; r++) {\n            for (let c = 0; c < board.grid[r].length; c++) {\n                this.grid[r][c] = board.grid[r][c].value\n            }\n        }\n    }\n}\n\nexport default BoardStatus"]},"metadata":{},"sourceType":"module"}