{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/Timer.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Timer.css';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elapsed: 0\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.isPaused) {\n      this.timerInterval = setInterval(() => {\n        this.setState(({\n          elapsed\n        }) => ({\n          elapsed: elapsed + 1\n        }));\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerInterval);\n  }\n\n  render() {\n    const {\n      elapsed\n    } = this.state;\n\n    if (this.isPaused) {\n      console.log(\"Timer must be paused\");\n    } else {\n      console.log(\"Timer must not be paused\");\n    }\n\n    let seconds = elapsed;\n    let minutes = 0;\n    let hours = 0;\n\n    if (seconds >= 60) {\n      minutes = Math.floor(seconds / 60);\n      seconds = seconds % 60;\n\n      if (minutes >= 60) {\n        hours = Math.floor(minutes / 60);\n        minutes = minutes % 60;\n      }\n    }\n\n    let secondStr = seconds < 10 ? \"0\" + seconds : \"\" + seconds;\n    let minuteStr = \"\" + minutes;\n\n    if (hours > 0) {\n      minuteStr = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n    }\n\n    let hourStr = \"\" + hours;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, hours > 0 ? hourStr + \":\" : \"\", minuteStr, \":\", secondStr);\n  }\n\n}\n\nTimer.propTypes = {\n  isPaused: PropTypes.bool.isRequired\n};\nexport default Timer;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/Timer.jsx"],"names":["React","Fragment","Component","PropTypes","Timer","constructor","props","state","elapsed","componentDidMount","isPaused","timerInterval","setInterval","setState","componentWillUnmount","clearInterval","render","console","log","seconds","minutes","hours","Math","floor","secondStr","minuteStr","hourStr","propTypes","bool","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,kBAAP;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC1BG,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAI;AACjB,QAAI,CAAC,KAAKH,KAAL,CAAWI,QAAhB,EAA0B;AACtB,WAAKC,aAAL,GAAqBC,WAAW,CAAC,MAAM;AACnC,aAAKC,QAAL,CAAc,CAAC;AAAEL,UAAAA;AAAF,SAAD,MAAkB;AAC5BA,UAAAA,OAAO,EAAEA,OAAO,GAAG;AADS,SAAlB,CAAd;AAGH,OAJ+B,EAI7B,IAJ6B,CAAhC;AAKH;AACJ;;AAEDM,EAAAA,oBAAoB,GAAI;AACpBC,IAAAA,aAAa,CAAC,KAAKJ,aAAN,CAAb;AACH;;AAEDK,EAAAA,MAAM,GAAI;AACN,UAAM;AAAER,MAAAA;AAAF,QAAc,KAAKD,KAAzB;;AACA,QAAI,KAAKG,QAAT,EAAmB;AACfO,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AACD,QAAIC,OAAO,GAAGX,OAAd;AACA,QAAIY,OAAO,GAAG,CAAd;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,QAAIF,OAAO,IAAI,EAAf,EAAmB;AACfC,MAAAA,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,EAArB,CAAV;AACAA,MAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;;AACA,UAAIC,OAAO,IAAI,EAAf,EAAmB;AACfC,QAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,EAArB,CAAR;AACAA,QAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AACH;AACJ;;AAED,QAAII,SAAS,GAAGL,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+B,KAAKA,OAApD;AACA,QAAIM,SAAS,GAAG,KAAKL,OAArB;;AACA,QAAIC,KAAK,GAAG,CAAZ,EAAe;AACXI,MAAAA,SAAS,GAAGL,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+B,KAAKA,OAAhD;AACH;;AACD,QAAIM,OAAO,GAAG,KAAKL,KAAnB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,KAAK,GAAG,CAAR,GAAYK,OAAO,GAAG,GAAtB,GAA4B,EADjC,EACqCD,SADrC,OACiDD,SADjD,CADJ;AAKH;;AAtDyB;;AAyD9BpB,KAAK,CAACuB,SAAN,GAAkB;AACdjB,EAAAA,QAAQ,EAAEP,SAAS,CAACyB,IAAV,CAAeC;AADX,CAAlB;AAIA,eAAezB,KAAf","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/Timer.css'\n\nclass Timer extends Component {\n    constructor (props) {\n        super(props)\n\n        this.state = {\n            elapsed: 0\n        }\n    }\n\n    componentDidMount () {\n        if (!this.props.isPaused) {\n            this.timerInterval = setInterval(() => {\n                this.setState(({ elapsed }) => ({\n                    elapsed: elapsed + 1\n                }))\n            }, 1000);\n        }\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.timerInterval)\n    }\n\n    render () {\n        const { elapsed } = this.state\n        if (this.isPaused) {\n            console.log(\"Timer must be paused\")\n        } else {\n            console.log(\"Timer must not be paused\")\n        }\n        let seconds = elapsed\n        let minutes = 0\n        let hours = 0\n        if (seconds >= 60) {\n            minutes = Math.floor(seconds / 60)\n            seconds = seconds % 60\n            if (minutes >= 60) {\n                hours = Math.floor(minutes / 60)\n                minutes = minutes % 60\n            }\n        }\n\n        let secondStr = seconds < 10 ? \"0\" + seconds : \"\" + seconds\n        let minuteStr = \"\" + minutes\n        if (hours > 0) {\n            minuteStr = minutes < 10 ? \"0\" + minutes : \"\" + minutes\n        }\n        let hourStr = \"\" + hours\n\n        return (\n            <div className=\"crossword-timer\">\n                {hours > 0 ? hourStr + \":\" : \"\"}{minuteStr}:{secondStr}\n            </div>\n        )\n    }\n}\n\nTimer.propTypes = {\n    isPaused: PropTypes.bool.isRequired\n}\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}