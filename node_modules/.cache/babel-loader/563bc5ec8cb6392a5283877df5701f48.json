{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/FullCrosswordApp.jsx\";\nimport React, { StrictMode, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CrosswordPage from './CrosswordPage.jsx';\nimport CrosswordHeaderPage from './CrosswordHeaderPage.jsx';\nimport api from '../libs/api.js';\n\nclass FullCrosswordApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crosswords: [],\n      selectedCrossword: null\n    };\n    this.loadCrosswords = this.loadCrosswords.bind(this);\n    this.crosswordSelected = this.crosswordSelected.bind(this);\n    this.crosswordDeselected = this.crosswordDeselected.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadCrosswords();\n  }\n\n  async loadCrosswords() {\n    let response;\n    let requestSuccess = false;\n\n    try {\n      console.log('Getting all crosswords...');\n      response = await api.getAllCrosswords();\n      console.log(response);\n      requestSuccess = response.status === 200;\n    } catch (error) {\n      requestSuccess = false;\n    }\n\n    if (requestSuccess) {\n      let crosswords = response.data.sort((a, b) => a.date < b.date ? 1 : -1);\n      this.setState({\n        crosswords: crosswords\n      });\n    }\n  }\n\n  crosswordSelected(crosswordId) {\n    let selectedCrossword = this.state.crosswords.find(c => c.id === crosswordId);\n    this.setState(state => {\n      return {\n        selectedCrossword: selectedCrossword\n      };\n    });\n  }\n\n  crosswordDeselected() {\n    this.setState(state => {\n      return {\n        selectedCrossword: null\n      };\n    });\n  }\n\n  render() {\n    const {\n      crosswords,\n      selectedCrossword\n    } = this.state;\n\n    if (selectedCrossword) {\n      return /*#__PURE__*/React.createElement(StrictMode, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CrosswordPage, {\n        crossword: selectedCrossword,\n        backSelected: this.crosswordDeselected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(StrictMode, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CrosswordHeaderPage, {\n        crosswords: crosswords,\n        crosswordSelected: this.crosswordSelected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n}\n\nFullCrosswordApp.propTypes = {\n  backSelected: PropTypes.func.isRequired\n};\nexport default FullCrosswordApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/FullCrosswordApp.jsx"],"names":["React","StrictMode","Component","PropTypes","CrosswordPage","CrosswordHeaderPage","api","FullCrosswordApp","constructor","props","state","crosswords","selectedCrossword","loadCrosswords","bind","crosswordSelected","crosswordDeselected","componentDidMount","response","requestSuccess","console","log","getAllCrosswords","status","error","data","sort","a","b","date","setState","crosswordId","find","c","id","render","propTypes","backSelected","func","isRequired"],"mappings":"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","sourcesContent":["import React, { StrictMode, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport CrosswordPage from './CrosswordPage.jsx'\nimport CrosswordHeaderPage from './CrosswordHeaderPage.jsx'\nimport api from '../libs/api.js'\n\nclass FullCrosswordApp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            crosswords: [],\n            selectedCrossword: null,\n        }\n\n        this.loadCrosswords = this.loadCrosswords.bind(this)\n        this.crosswordSelected = this.crosswordSelected.bind(this)\n        this.crosswordDeselected = this.crosswordDeselected.bind(this)\n    }\n\n    componentDidMount () {\n        this.loadCrosswords()\n    }\n\n    async loadCrosswords () {\n        let response\n        let requestSuccess = false\n        try {\n            console.log('Getting all crosswords...')\n            response = await api.getAllCrosswords()\n            console.log(response)\n            requestSuccess = response.status === 200\n        } catch (error) {\n            requestSuccess = false\n        }\n\n        if (requestSuccess) {\n            let crosswords = response.data.sort((a, b) => (a.date < b.date) ? 1 : -1)\n            this.setState({\n                crosswords: crosswords\n            })\n        }\n    }\n\n    crosswordSelected (crosswordId) {\n        let selectedCrossword = this.state.crosswords.find(c => c.id === crosswordId)\n        this.setState((state) => {\n            return {\n                selectedCrossword: selectedCrossword\n            }\n        })\n    }\n\n    crosswordDeselected () {\n        this.setState((state) => {\n            return {\n                selectedCrossword: null\n            }\n        })\n    }\n\n    render () {\n        const { crosswords, selectedCrossword } = this.state\n\n        if (selectedCrossword) {\n            return (\n                <StrictMode>\n                    <CrosswordPage \n                        crossword={selectedCrossword} \n                        backSelected={this.crosswordDeselected}/>\n                </StrictMode>\n            )\n        } else {\n            return (\n                <StrictMode>\n                    <CrosswordHeaderPage \n                        crosswords={crosswords}\n                        crosswordSelected={this.crosswordSelected} />\n                </StrictMode>\n            )\n        }\n    }\n}\n\nFullCrosswordApp.propTypes = {\n    backSelected: PropTypes.func.isRequired\n}\n\nexport default FullCrosswordApp"]},"metadata":{},"sourceType":"module"}