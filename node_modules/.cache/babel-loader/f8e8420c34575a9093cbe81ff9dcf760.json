{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crosswordapp/crosswordapp-frontend/src/components/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/CrosswordBoardApp.css';\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx';\nimport api from '../libs/api.js';\nimport CrosswordSquareSlash from './CrosswordSquareSlash';\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.downClues = this.props.crossword.downClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.clueRefMap = this.props.crossword.clueRefMap;\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n    this.getReferencedSquares = this.getReferencedSquares.bind(this);\n    this.getSquaresOfClue = this.getSquaresOfClue.bind(this);\n    this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this);\n    this.getSquareValueColor = this.getSquareValueColor.bind(this);\n    this.crosswordIsComplete = this.crosswordIsComplete.bind(this);\n  }\n\n  async crosswordIsComplete(showNotComplete) {\n    let response;\n    let requestSuccess = false;\n\n    try {\n      console.log('Checking whether crossword is finished...');\n      console.log(this.props.crossword.board);\n      response = await api.crosswordIsComplete(this.props.crossword.id, \"ME\", this.props.crossword.board);\n      console.log(response);\n      requestSuccess = response.status === 200;\n    } catch (error) {\n      requestSuccess = false;\n    }\n\n    if (requestSuccess) {\n      if (response.data) {\n        this.props.crosswordFinished();\n      } else {\n        if (showNotComplete) {\n          this.props.crosswordUnfinished();\n        }\n      }\n    }\n  }\n\n  getSelectedSquares(selection) {\n    let boardSquare = this.props.crossword.board.grid[selection.rowCoord][selection.colCoord];\n    let selectedCoordList = [];\n\n    if (selection.direction === \"Across\") {\n      let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n    } else {\n      let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n    }\n\n    return selectedCoordList;\n  }\n\n  getReferencedSquares(selection) {\n    let selectedCoordList = [];\n\n    if (selection.direction === \"Across\") {\n      let clueNum = this.props.crossword.board.grid[selection.rowCoord][selection.colCoord].acrossClueNum;\n      let clueKey = \"A\" + clueNum;\n\n      if (clueKey in this.clueRefMap) {\n        for (let key of this.clueRefMap[clueKey]) {\n          let clue;\n\n          if (key.substring(0, 1) === \"A\") {\n            clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          } else {\n            clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          }\n\n          selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n        }\n      }\n    } else {\n      let clueNum = this.props.crossword.board.grid[selection.rowCoord][selection.colCoord].downClueNum;\n      let clueKey = \"D\" + clueNum;\n\n      if (clueKey in this.clueRefMap) {\n        for (let key of this.clueRefMap[clueKey]) {\n          let clue;\n\n          if (key.substring(0, 1) === \"A\") {\n            clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          } else {\n            clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          }\n\n          selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n        }\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  getSquaresOfClue(clue) {\n    const [firstRow, firstCol] = [clue.rowCoord, clue.colCoord];\n    let coordList = [];\n\n    if (clue.direction === \"Across\") {\n      for (let i = firstCol; i < firstCol + clue.answerLength; i++) {\n        coordList.push([firstRow, i].toString());\n      }\n    } else {\n      for (let i = firstRow; i < firstRow + clue.answerLength; i++) {\n        coordList.push([i, firstCol].toString());\n      }\n    }\n\n    return coordList;\n  }\n\n  getSquareBackgroundColor(square, selection, highlightedSquares, referencedSquares) {\n    if (square.value === \"_\") return \"black\";\n    let thisSquareKey = [square.rowCoord, square.colCoord].toString();\n\n    if (highlightedSquares.includes(thisSquareKey)) {\n      if (thisSquareKey === [selection.rowCoord, selection.colCoord].toString()) {\n        return this.props.settings.colorScheme.colors[1];\n      } else {\n        return this.props.settings.colorScheme.colors[2];\n      }\n    } else if (referencedSquares.includes(thisSquareKey)) {\n      return this.props.settings.colorScheme.colors[0];\n    }\n\n    return \"white\";\n  }\n\n  getSquareValueColor(square) {\n    if (square.status === \"Revealed\" || square.status === \"CheckedTrue\") {\n      return this.props.settings.colorScheme.colors[3];\n    }\n\n    return \"black\";\n  }\n\n  render() {\n    //const { currentSelection, grid } = this.state\n    const selection = this.props.crossword.board.selection;\n    const grid = this.props.crossword.board.grid;\n    let clueWidthPx = \"\" + (this.props.windowWidthPx - (this.props.boardWidthPx + 160) - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = this.props.crossword.board.grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightedSquares = this.getSelectedSquares(selection);\n    const referencedSquares = this.getReferencedSquares(selection);\n    const acrossClue = this.acrossClues.find(c => c.number === grid[selection.rowCoord][selection.colCoord].acrossClueNum);\n    const downClue = this.downClues.find(c => c.number === grid[selection.rowCoord][selection.colCoord].downClueNum);\n    let squareNumberStyle = {\n      fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 9 ? \"9pt\" : \"16pt\"}`}`,\n      marginLeft: `${boardSize <= 9 ? \"5px\" : \"\"}`,\n      marginTop: `${boardSize <= 9 ? \"4px\" : \"\"}`\n    };\n    let squareValueStyle = {\n      width: squarePx,\n      height: squarePx / 2,\n      marginTop: squarePx * 3 / 10,\n      fontSize: `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"44pt\"}`}`\n    };\n\n    if (boardPx > 700) {\n      // handle bigger board on large screens\n      squareNumberStyle[\"fontSize\"] = `${boardSize > 15 ? \"10pt\" : `${boardSize > 10 ? \"13pt\" : \"22pt\"}`}`;\n      squareValueStyle[\"fontSize\"] = `${boardSize > 15 ? \"20pt\" : `${boardSize > 10 ? \"24pt\" : \"64pt\"}`}`;\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 29\n      }\n    }, row.map((square, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: j,\n      className: \"crossword-square\",\n      onClick: () => {\n        this.props.boardSquareClicked(square);\n      },\n      style: {\n        width: squarePx,\n        height: squarePx,\n        backgroundColor: this.getSquareBackgroundColor(square, selection, highlightedSquares, referencedSquares)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-number\",\n      style: squareNumberStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 41\n      }\n    }, grid[i][j].number > 0 ? grid[i][j].number : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-value\",\n      style: {\n        width: squarePx,\n        height: squarePx / 2,\n        marginTop: squarePx * 3 / 10,\n        color: this.getSquareValueColor(square),\n        fontSize: `${boardSize > 15 ? `${boardPx > 700 ? \"20pt\" : \"13pt\"}` : `${boardSize > 10 ? `${boardPx > 700 ? \"24pt\" : \"17pt\"}` : `${boardPx > 700 ? \"64pt\" : \"44pt\"}`}`}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 41\n      }\n    }, square.value === \"\" || square.value === '_' ? '' : square.value), /*#__PURE__*/React.createElement(CrosswordSquareSlash, {\n      hidden: square.status !== \"CheckedFalse\",\n      width: squarePx,\n      height: squarePx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 41\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Across\",\n      clueList: this.acrossClues,\n      selectedClue: acrossClue,\n      isMatchingDirection: selection.direction === 'Across',\n      clueClicked: this.props.clueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Down\",\n      clueList: this.downClues,\n      selectedClue: downClue,\n      isMatchingDirection: selection.direction === 'Down',\n      clueClicked: this.props.clueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  boardSquareClicked: PropTypes.func.isRequired,\n  clueClicked: PropTypes.func.isRequired,\n  typingDisabled: PropTypes.bool.isRequired,\n  boardWidthPx: PropTypes.number.isRequired,\n  windowWidthPx: PropTypes.number.isRequired,\n  settings: PropTypes.object.isRequired,\n  crosswordFinished: PropTypes.func.isRequired,\n  crosswordUnfinished: PropTypes.func.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crosswordapp/crosswordapp-frontend/src/components/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","CrosswordClueScroll","api","CrosswordSquareSlash","CrosswordBoardApp","constructor","props","acrossClues","crossword","sort","c1","c2","number","downClues","clueRefMap","getSelectedSquares","bind","getReferencedSquares","getSquaresOfClue","getSquareBackgroundColor","getSquareValueColor","crosswordIsComplete","showNotComplete","response","requestSuccess","console","log","board","id","status","error","data","crosswordFinished","crosswordUnfinished","selection","boardSquare","grid","rowCoord","colCoord","selectedCoordList","direction","clue","find","acrossClueNum","concat","downClueNum","clueNum","clueKey","key","substring","toString","length","firstRow","firstCol","coordList","i","answerLength","push","square","highlightedSquares","referencedSquares","value","thisSquareKey","includes","settings","colorScheme","colors","render","clueWidthPx","windowWidthPx","boardWidthPx","boardPx","boardSize","rowPx","squarePx","acrossClue","c","downClue","squareNumberStyle","fontSize","marginLeft","marginTop","squareValueStyle","width","height","map","row","j","boardSquareClicked","backgroundColor","color","clueClicked","propTypes","object","isRequired","func","typingDisabled","bool"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/CrosswordBoardApp.css'\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx'\nimport api from '../libs/api.js'\nimport CrosswordSquareSlash from './CrosswordSquareSlash'\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n\n        this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.downClues = this.props.crossword.downClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.clueRefMap = this.props.crossword.clueRefMap\n\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n        this.getReferencedSquares = this.getReferencedSquares.bind(this)\n        this.getSquaresOfClue = this.getSquaresOfClue.bind(this)\n        this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this)\n        this.getSquareValueColor = this.getSquareValueColor.bind(this)\n\n        this.crosswordIsComplete = this.crosswordIsComplete.bind(this)\n    }\n\n    async crosswordIsComplete (showNotComplete) {\n        let response\n        let requestSuccess = false\n        try {\n            console.log('Checking whether crossword is finished...')\n            console.log(this.props.crossword.board)\n            response = await api.crosswordIsComplete(this.props.crossword.id, \"ME\", this.props.crossword.board)\n            console.log(response)\n            requestSuccess = response.status === 200\n        } catch (error) {\n            requestSuccess = false\n        }\n\n        if (requestSuccess) {\n            if (response.data) {\n                this.props.crosswordFinished()\n            } else {\n                if (showNotComplete) {\n                    this.props.crosswordUnfinished()\n                }\n            }\n        }\n    }\n\n    getSelectedSquares (selection) {\n        let boardSquare = this.props.crossword.board.grid[selection.rowCoord][selection.colCoord]\n        let selectedCoordList = []\n        if (selection.direction === \"Across\") {\n            let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n        } else {\n            let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n        }\n        return selectedCoordList\n    }\n\n    getReferencedSquares (selection) {\n        let selectedCoordList = []\n        if (selection.direction === \"Across\") {\n            let clueNum = this.props.crossword.board.grid[selection.rowCoord][selection.colCoord].acrossClueNum\n            let clueKey = \"A\" + clueNum\n            if (clueKey in this.clueRefMap) {\n                for (let key of this.clueRefMap[clueKey]) {\n                    let clue\n                    if (key.substring(0,1) === \"A\") {\n                        clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1,key.length))\n                    } else {\n                        clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length))\n                    }\n                    selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n                }\n            }\n        } else {\n            let clueNum = this.props.crossword.board.grid[selection.rowCoord][selection.colCoord].downClueNum\n            let clueKey = \"D\" + clueNum\n            if (clueKey in this.clueRefMap) {\n                for (let key of this.clueRefMap[clueKey]) {\n                    let clue\n                    if (key.substring(0,1) === \"A\") {\n                        clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1,key.length))\n                    } else {\n                        clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length))\n                    }\n                    selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n                }\n            }\n        }\n        return selectedCoordList\n    }\n\n    getSquaresOfClue (clue) {\n        const [firstRow, firstCol] = [clue.rowCoord, clue.colCoord]\n        let coordList = []\n        if (clue.direction === \"Across\") {\n            for (let i = firstCol; i < firstCol + clue.answerLength; i++) {\n                coordList.push([firstRow, i].toString())\n            }\n        } else {\n            for (let i = firstRow; i < firstRow + clue.answerLength; i++) {\n                coordList.push([i, firstCol].toString())\n            }\n        }\n        return coordList\n    }\n\n    getSquareBackgroundColor (square, selection, highlightedSquares, referencedSquares) {\n        if (square.value === \"_\") return \"black\"\n        let thisSquareKey = [square.rowCoord, square.colCoord].toString()\n        if (highlightedSquares.includes(thisSquareKey)) {\n            if (thisSquareKey === [selection.rowCoord, selection.colCoord].toString()) {\n                return this.props.settings.colorScheme.colors[1]\n            } else {\n                return this.props.settings.colorScheme.colors[2]\n            }\n        } else if (referencedSquares.includes(thisSquareKey)) {\n            return this.props.settings.colorScheme.colors[0]\n        }\n        return \"white\"\n    }\n\n    getSquareValueColor (square) {\n        if (square.status === \"Revealed\" || square.status === \"CheckedTrue\") {\n            return this.props.settings.colorScheme.colors[3]\n        }\n        return \"black\"\n    }\n\n    render () {\n        //const { currentSelection, grid } = this.state\n        const selection = this.props.crossword.board.selection\n        const grid = this.props.crossword.board.grid\n\n        let clueWidthPx = \"\" + (this.props.windowWidthPx - (this.props.boardWidthPx + 160) - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = this.props.crossword.board.grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightedSquares = this.getSelectedSquares(selection)\n        const referencedSquares = this.getReferencedSquares(selection)\n\n        const acrossClue = this.acrossClues.find(c => c.number === grid[selection.rowCoord][selection.colCoord].acrossClueNum)\n        const downClue = this.downClues.find(c => c.number === grid[selection.rowCoord][selection.colCoord].downClueNum)\n\n        let squareNumberStyle = {\n            fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 9 ? \"9pt\" : \"16pt\"}`}`,\n            marginLeft: `${boardSize <= 9 ? \"5px\" : \"\"}`,\n            marginTop: `${boardSize <= 9 ? \"4px\" : \"\"}`\n        }\n        let squareValueStyle = {\n            width: squarePx,\n            height: squarePx/2,\n            marginTop: squarePx*3/10,\n            fontSize: `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"44pt\"}`}`\n        }\n\n        if (boardPx > 700) {\n            // handle bigger board on large screens\n            squareNumberStyle[\"fontSize\"] = `${boardSize > 15 ? \"10pt\" : `${boardSize > 10 ? \"13pt\" : \"22pt\"}`}`\n            squareValueStyle[\"fontSize\"] = `${boardSize > 15 ? \"20pt\" : `${boardSize > 10 ? \"24pt\" : \"64pt\"}`}`\n        }\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( (row, i) =>\n                            <div key={i} style={{height : rowPx}}>\n                                {row.map( (square, j) => \n                                    <div key={j} className={\"crossword-square\"} onClick={() => { this.props.boardSquareClicked(square) }}\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : this.getSquareBackgroundColor(square, selection, highlightedSquares, referencedSquares)}}>\n                                        <div className=\"board-square-number\" style={squareNumberStyle}>\n                                            {grid[i][j].number > 0 ? grid[i][j].number : \"\"}</div>\n                                        <div className=\"board-square-value\" \n                                            style={{width: squarePx, height: squarePx/2, marginTop: squarePx*3/10,\n                                                color: this.getSquareValueColor(square),\n                                                fontSize: `${boardSize > 15 ? `${boardPx > 700 ? \"20pt\" : \"13pt\"}` : \n                                                    `${boardSize > 10 ? `${boardPx > 700 ? \"24pt\" : \"17pt\"}` : `${boardPx > 700 ? \"64pt\" : \"44pt\"}`}`}`}}>\n                                            {square.value === \"\" || square.value === '_' ? '' : square.value}\n                                        </div>\n                                        <CrosswordSquareSlash \n                                            hidden={square.status !== \"CheckedFalse\"} \n                                            width={squarePx} height={squarePx} />\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <CrosswordClueScroll \n                            listTitle={\"Across\"}\n                            clueList={this.acrossClues}\n                            selectedClue={acrossClue}\n                            isMatchingDirection={selection.direction === 'Across'}\n                            clueClicked={this.props.clueClicked}\n                            settings={this.props.settings}/>\n                        <CrosswordClueScroll \n                            listTitle={\"Down\"}\n                            clueList={this.downClues}\n                            selectedClue={downClue}\n                            isMatchingDirection={selection.direction === 'Down'}\n                            clueClicked={this.props.clueClicked}\n                            settings={this.props.settings}/>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    boardSquareClicked: PropTypes.func.isRequired,\n    clueClicked: PropTypes.func.isRequired,\n    typingDisabled: PropTypes.bool.isRequired,\n    boardWidthPx: PropTypes.number.isRequired,\n    windowWidthPx: PropTypes.number.isRequired,\n    settings: PropTypes.object.isRequired,\n    crosswordFinished: PropTypes.func.isRequired,\n    crosswordUnfinished: PropTypes.func.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}