{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CrosswordBoardApp.css';\nimport SquareSelection from '../../libs/SquareSelection.js';\nconst highlightColors = [\"#ffda00\", \"#a7d8ff\"];\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    let currentSelection = new SquareSelection();\n    let i = 0;\n\n    while (this.props.crossword.numbered[0][i] === \"_\") {\n      i++;\n    }\n\n    currentSelection.coords = [0, i];\n    currentSelection.direction = \"Across\";\n    this.state = {\n      windowWidth: window.innerWidth,\n      currentSelection: currentSelection,\n      id: this.props.crossword.id,\n      numbered: this.props.crossword.numbered,\n      grid: this.props.crossword.grid,\n      acrossClues: this.props.crossword.acrossClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1),\n      downClues: this.props.crossword.downClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1),\n      clueRefMap: this.props.crossword.clueRefMap\n    };\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n    this.clueRowClicked = this.clueRowClicked.bind(this);\n    this.boardSquareClicked = this.boardSquareClicked.bind(this);\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n    this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this);\n    this.getClueBackgroundColor = this.getClueBackgroundColor.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"Crossword Board App is Mounting...\");\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Crossword Board App is Unmounting...\");\n    window.removeEventListener('resize', this.handleWindowResize); // save state of grid\n  }\n\n  handleWindowResize() {\n    this.setState({\n      windowWidth: window.innerWidth\n    });\n  }\n\n  clueRowClicked(index, listType) {\n    if (listType === \"Across\") {\n      console.log('Clicked across clue with number: ' + this.state.acrossClues[index].number);\n    } else {\n      console.log('Clicked down clue with number: ' + this.state.downClues[index].number);\n    }\n  }\n\n  boardSquareClicked(square) {\n    console.log(\"Clicked square at indices \" + square.rowCoord + \",\" + square.colCoord);\n  }\n\n  getSelectedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    console.log(\"Getting selected squares for selection \" + coords[0] + \",\" + coords[1] + \": \" + direction);\n    let boardSquare = this.state.grid[coords[0]][coords[1]];\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clue = this.state.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      console.log(clue);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n      console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen);\n\n      for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n        selectedCoordList.push([firstCoords[0], i].toString());\n      }\n    } else {\n      let clue = this.state.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n      console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen);\n\n      for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n        selectedCoordList.push([i, firstCoords[1]].toString());\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  getSquareBackgroundColor(square, selection, highlightedSquares) {\n    console.log(\"getting background color for \" + square.rowCoord + \",\" + square.colCoord + \" and highglighted squares are \" + highlightedSquares);\n    if (square.value === \"_\") return \"black\";\n    let thisSquareKey = [square.rowCoord, square.colCoord].toString();\n\n    if (highlightedSquares.includes(thisSquareKey)) {\n      console.log(\"Found square to highlight\");\n\n      if (thisSquareKey == selection.coords.toString()) {\n        return highlightColors[0];\n      } else {\n        return highlightColors[1];\n      }\n    }\n\n    return \"white\";\n  }\n\n  getClueBackgroundColor(clue, selection) {\n    let selectedSquare = this.state.grid[selection.coords[0]][selection.coords[1]];\n\n    if (clue.direction === \"ACROSS\" && clue.number === selectedSquare.acrossClueNum) {\n      if (selection.direction === \"Across\") {\n        return highlightColors[1];\n      } else {\n        return highlightColors[0];\n      }\n    } else if (clue.direction === \"DOWN\" && clue.number === selectedSquare.downClueNum) {\n      if (selection.direction === \"Down\") {\n        return highlightColors[1];\n      } else {\n        return highlightColors[0];\n      }\n    }\n\n    return \"white\";\n  }\n\n  render() {\n    const {\n      windowWidth,\n      currentSelection,\n      id,\n      numbered,\n      grid,\n      acrossClues,\n      downClues,\n      clueRefMap\n    } = this.state;\n    let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightedSquares = this.getSelectedSquares(currentSelection);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, grid.map(row => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 29\n      }\n    }, row.map(square => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-square\",\n      onClick: () => {\n        this.boardSquareClicked(square);\n      },\n      style: {\n        width: squarePx,\n        height: squarePx,\n        backgroundColor: this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 37\n      }\n    }, square.value === '?' || square.value === '_' ? '' : square.value))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, \"Across\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 29\n      }\n    }, acrossClues.map(clue => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row\",\n      style: {\n        backgroundColor: this.getClueBackgroundColor(clue, currentSelection),\n        borderLeftColor: this.getClueBorderColor(clue, currentSelection)\n      },\n      onClick: () => {\n        this.clueRowClicked(acrossClues.findIndex(other => other.number === clue.number), \"Across\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 41\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 41\n      }\n    }, clue.text))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }, \"Down\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, downClues.map(clue => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row\",\n      style: {\n        backgroundColor: this.getClueBackgroundColor(clue, currentSelection),\n        borderLeftColor: this.getClueBorderColor(clue, currentSelection)\n      },\n      onClick: () => {\n        this.clueRowClicked(downClues.findIndex(other => other.number === clue.number), \"Down\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 41\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 41\n      }\n    }, clue.text))))))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  boardWidthPx: PropTypes.number.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","SquareSelection","highlightColors","CrosswordBoardApp","constructor","props","currentSelection","i","crossword","numbered","coords","direction","state","windowWidth","window","innerWidth","id","grid","acrossClues","sort","c1","c2","number","downClues","clueRefMap","handleWindowResize","bind","clueRowClicked","boardSquareClicked","getSelectedSquares","getSquareBackgroundColor","getClueBackgroundColor","componentDidMount","console","log","addEventListener","componentWillUnmount","removeEventListener","setState","index","listType","square","rowCoord","colCoord","selection","boardSquare","selectedCoordList","clue","find","acrossClueNum","firstCoords","wordLen","answerLength","push","toString","downClueNum","highlightedSquares","value","thisSquareKey","includes","selectedSquare","render","clueWidthPx","boardPx","boardWidthPx","boardSize","length","rowPx","squarePx","width","height","map","row","backgroundColor","borderLeftColor","getClueBorderColor","findIndex","other","text","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,yBAAP;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AAEA,MAAMC,eAAe,GAAG,CAAC,SAAD,EAAY,SAAZ,CAAxB;;AAEA,MAAMC,iBAAN,SAAgCJ,SAAhC,CAA0C;AACtCK,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AAEA,QAAIC,gBAAgB,GAAG,IAAIL,eAAJ,EAAvB;AACA,QAAIM,CAAC,GAAG,CAAR;;AACA,WAAO,KAAKF,KAAL,CAAWG,SAAX,CAAqBC,QAArB,CAA8B,CAA9B,EAAiCF,CAAjC,MAAwC,GAA/C,EAAoD;AAChDA,MAAAA,CAAC;AACJ;;AACDD,IAAAA,gBAAgB,CAACI,MAAjB,GAA0B,CAAC,CAAD,EAAGH,CAAH,CAA1B;AACAD,IAAAA,gBAAgB,CAACK,SAAjB,GAA6B,QAA7B;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAEC,MAAM,CAACC,UADX;AAETT,MAAAA,gBAAgB,EAAEA,gBAFT;AAGTU,MAAAA,EAAE,EAAE,KAAKX,KAAL,CAAWG,SAAX,CAAqBQ,EAHhB;AAITP,MAAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWG,SAAX,CAAqBC,QAJtB;AAKTQ,MAAAA,IAAI,EAAE,KAAKZ,KAAL,CAAWG,SAAX,CAAqBS,IALlB;AAMTC,MAAAA,WAAW,EAAE,KAAKb,KAAL,CAAWG,SAAX,CAAqBU,WAArB,CAAiCC,IAAjC,CAAsC,CAACC,EAAD,EAAKC,EAAL,KAAaD,EAAE,CAACE,MAAH,GAAYD,EAAE,CAACC,MAAhB,GAA0B,CAA1B,GAA8B,CAAC,CAAjF,CANJ;AAOTC,MAAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWG,SAAX,CAAqBe,SAArB,CAA+BJ,IAA/B,CAAoC,CAACC,EAAD,EAAKC,EAAL,KAAaD,EAAE,CAACE,MAAH,GAAYD,EAAE,CAACC,MAAhB,GAA0B,CAA1B,GAA8B,CAAC,CAA/E,CAPF;AAQTE,MAAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWG,SAAX,CAAqBgB;AARxB,KAAb;AAWA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AAEA,SAAKG,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBH,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKI,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BJ,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAKK,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BL,IAA5B,CAAiC,IAAjC,CAA9B;AACH;;AAEDM,EAAAA,iBAAiB,GAAI;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACApB,IAAAA,MAAM,CAACqB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKV,kBAAvC;AAEH;;AAEDW,EAAAA,oBAAoB,GAAI;AACpBH,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACApB,IAAAA,MAAM,CAACuB,mBAAP,CAA2B,QAA3B,EAAqC,KAAKZ,kBAA1C,EAFoB,CAIpB;AACH;;AAEDA,EAAAA,kBAAkB,GAAI;AAClB,SAAKa,QAAL,CAAc;AACVzB,MAAAA,WAAW,EAAEC,MAAM,CAACC;AADV,KAAd;AAGH;;AAEDY,EAAAA,cAAc,CAAEY,KAAF,EAASC,QAAT,EAAmB;AAC7B,QAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACvBP,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsC,KAAKtB,KAAL,CAAWM,WAAX,CAAuBqB,KAAvB,EAA8BjB,MAAhF;AACH,KAFD,MAEO;AACHW,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoC,KAAKtB,KAAL,CAAWW,SAAX,CAAqBgB,KAArB,EAA4BjB,MAA5E;AACH;AACJ;;AAEDM,EAAAA,kBAAkB,CAAEa,MAAF,EAAU;AACxBR,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BO,MAAM,CAACC,QAAtC,GAAiD,GAAjD,GAAuDD,MAAM,CAACE,QAA1E;AACH;;AAEDd,EAAAA,kBAAkB,CAAEe,SAAF,EAAa;AAC3B,UAAMlC,MAAM,GAAGkC,SAAS,CAAClC,MAAzB;AACA,UAAMC,SAAS,GAAGiC,SAAS,CAACjC,SAA5B;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4CxB,MAAM,CAAC,CAAD,CAAlD,GAAwD,GAAxD,GAA8DA,MAAM,CAAC,CAAD,CAApE,GAA0E,IAA1E,GAAiFC,SAA7F;AACA,QAAIkC,WAAW,GAAG,KAAKjC,KAAL,CAAWK,IAAX,CAAgBP,MAAM,CAAC,CAAD,CAAtB,EAA2BA,MAAM,CAAC,CAAD,CAAjC,CAAlB;AACA,QAAIoC,iBAAiB,GAAG,EAAxB;;AACA,QAAInC,SAAS,KAAK,QAAlB,EAA4B;AACxB,UAAIoC,IAAI,GAAG,KAAKnC,KAAL,CAAWM,WAAX,CAAuB8B,IAAvB,CAA4BD,IAAI,IAAIA,IAAI,CAACzB,MAAL,KAAgBuB,WAAW,CAACI,aAAhE,CAAX;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;AACA,UAAIG,WAAW,GAAG,CAACH,IAAI,CAACL,QAAN,EAAgBK,IAAI,CAACJ,QAArB,CAAlB;AACA,UAAIQ,OAAO,GAAGJ,IAAI,CAACK,YAAnB;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBgB,WAAW,CAAC,CAAD,CAAnC,GAAyC,GAAzC,GAA+CA,WAAW,CAAC,CAAD,CAA1D,GAAgE,cAAhE,GAAiFC,OAA7F;;AACA,WAAK,IAAI5C,CAAC,GAAG2C,WAAW,CAAC,CAAD,CAAxB,EAA6B3C,CAAC,GAAG2C,WAAW,CAAC,CAAD,CAAX,GAAiBC,OAAlD,EAA2D5C,CAAC,EAA5D,EAAgE;AAC5DuC,QAAAA,iBAAiB,CAACO,IAAlB,CAAuB,CAACH,WAAW,CAAC,CAAD,CAAZ,EAAgB3C,CAAhB,EAAmB+C,QAAnB,EAAvB;AACH;AACJ,KATD,MASO;AACH,UAAIP,IAAI,GAAG,KAAKnC,KAAL,CAAWW,SAAX,CAAqByB,IAArB,CAA0BD,IAAI,IAAIA,IAAI,CAACzB,MAAL,KAAgBuB,WAAW,CAACU,WAA9D,CAAX;AACA,UAAIL,WAAW,GAAG,CAACH,IAAI,CAACL,QAAN,EAAgBK,IAAI,CAACJ,QAArB,CAAlB;AACA,UAAIQ,OAAO,GAAGJ,IAAI,CAACK,YAAnB;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBgB,WAAW,CAAC,CAAD,CAAnC,GAAyC,GAAzC,GAA+CA,WAAW,CAAC,CAAD,CAA1D,GAAgE,cAAhE,GAAiFC,OAA7F;;AACA,WAAK,IAAI5C,CAAC,GAAG2C,WAAW,CAAC,CAAD,CAAxB,EAA6B3C,CAAC,GAAG2C,WAAW,CAAC,CAAD,CAAX,GAAiBC,OAAlD,EAA2D5C,CAAC,EAA5D,EAAgE;AAC5DuC,QAAAA,iBAAiB,CAACO,IAAlB,CAAuB,CAAC9C,CAAD,EAAG2C,WAAW,CAAC,CAAD,CAAd,EAAmBI,QAAnB,EAAvB;AACH;AACJ;;AACD,WAAOR,iBAAP;AACH;;AAEDhB,EAAAA,wBAAwB,CAAEW,MAAF,EAAUG,SAAV,EAAqBY,kBAArB,EAAyC;AAC7DvB,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCO,MAAM,CAACC,QAAzC,GAAoD,GAApD,GAA0DD,MAAM,CAACE,QAAjE,GAA4E,gCAA5E,GAA+Ga,kBAA3H;AACA,QAAIf,MAAM,CAACgB,KAAP,KAAiB,GAArB,EAA0B,OAAO,OAAP;AAC1B,QAAIC,aAAa,GAAG,CAACjB,MAAM,CAACC,QAAR,EAAkBD,MAAM,CAACE,QAAzB,EAAmCW,QAAnC,EAApB;;AACA,QAAIE,kBAAkB,CAACG,QAAnB,CAA4BD,aAA5B,CAAJ,EAAgD;AAC5CzB,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;;AACA,UAAIwB,aAAa,IAAId,SAAS,CAAClC,MAAV,CAAiB4C,QAAjB,EAArB,EAAkD;AAC9C,eAAOpD,eAAe,CAAC,CAAD,CAAtB;AACH,OAFD,MAEO;AACH,eAAOA,eAAe,CAAC,CAAD,CAAtB;AACH;AACJ;;AACD,WAAO,OAAP;AACH;;AAED6B,EAAAA,sBAAsB,CAAEgB,IAAF,EAAQH,SAAR,EAAmB;AACrC,QAAIgB,cAAc,GAAG,KAAKhD,KAAL,CAAWK,IAAX,CAAgB2B,SAAS,CAAClC,MAAV,CAAiB,CAAjB,CAAhB,EAAqCkC,SAAS,CAAClC,MAAV,CAAiB,CAAjB,CAArC,CAArB;;AACA,QAAIqC,IAAI,CAACpC,SAAL,KAAmB,QAAnB,IAA+BoC,IAAI,CAACzB,MAAL,KAAgBsC,cAAc,CAACX,aAAlE,EAAiF;AAC7E,UAAIL,SAAS,CAACjC,SAAV,KAAwB,QAA5B,EAAsC;AAClC,eAAOT,eAAe,CAAC,CAAD,CAAtB;AACH,OAFD,MAEO;AACH,eAAOA,eAAe,CAAC,CAAD,CAAtB;AACH;AACJ,KAND,MAMO,IAAI6C,IAAI,CAACpC,SAAL,KAAmB,MAAnB,IAA6BoC,IAAI,CAACzB,MAAL,KAAgBsC,cAAc,CAACL,WAAhE,EAA6E;AAChF,UAAIX,SAAS,CAACjC,SAAV,KAAwB,MAA5B,EAAoC;AAChC,eAAOT,eAAe,CAAC,CAAD,CAAtB;AACH,OAFD,MAEO;AACH,eAAOA,eAAe,CAAC,CAAD,CAAtB;AACH;AACJ;;AACD,WAAO,OAAP;AACH;;AAED2D,EAAAA,MAAM,GAAI;AACN,UAAM;AAAEhD,MAAAA,WAAF;AAAeP,MAAAA,gBAAf;AAAiCU,MAAAA,EAAjC;AAAqCP,MAAAA,QAArC;AAA+CQ,MAAAA,IAA/C;AAAqDC,MAAAA,WAArD;AAAkEK,MAAAA,SAAlE;AAA6EC,MAAAA;AAA7E,QAA4F,KAAKZ,KAAvG;AACA,QAAIkD,WAAW,GAAG,MAAMjD,WAAW,GAAG,GAAd,GAAoB,CAA1B,IAA+B,IAAjD;AAEA,UAAMkD,OAAO,GAAG,KAAK1D,KAAL,CAAW2D,YAA3B;AACA,UAAMC,SAAS,GAAGhD,IAAI,CAACiD,MAAvB;AACA,UAAMC,KAAK,GAAGJ,OAAO,GAAGE,SAAxB;AACA,UAAMG,QAAQ,GAAGD,KAAK,GAAG,CAAzB;AAEA,UAAMX,kBAAkB,GAAG,KAAK3B,kBAAL,CAAwBvB,gBAAxB,CAA3B;AAEA,wBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,KAAK,EAAE;AAAE+D,QAAAA,KAAK,EAAGN,OAAV;AAAmBO,QAAAA,MAAM,EAAGP;AAA5B,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK9C,IAAI,CAACsD,GAAL,CAAUC,GAAG,iBACV;AAAK,MAAA,KAAK,EAAE;AAACF,QAAAA,MAAM,EAAGH;AAAV,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKK,GAAG,CAACD,GAAJ,CAAS9B,MAAM,iBACZ;AAAK,MAAA,SAAS,EAAE,kBAAhB;AAAoC,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKb,kBAAL,CAAwBa,MAAxB;AAAiC,OAAtF;AACQ,MAAA,KAAK,EAAE;AAAC4B,QAAAA,KAAK,EAAGD,QAAT;AAAmBE,QAAAA,MAAM,EAAGF,QAA5B;AACHK,QAAAA,eAAe,EAAG,KAAK3C,wBAAL,CAA8BW,MAA9B,EAAsCnC,gBAAtC,EAAwDkD,kBAAxD;AADf,OADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKf,MAAM,CAACgB,KAAP,KAAiB,GAAjB,IAAwBhB,MAAM,CAACgB,KAAP,KAAiB,GAAzC,GAA+C,EAA/C,GAAoDhB,MAAM,CAACgB,KAHhE,CADH,CADL,CADH,CADL,CADJ,eAeI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,KAAK,EAAE;AAACY,QAAAA,KAAK,EAAGP,WAAT;AAAsBQ,QAAAA,MAAM,EAAGP;AAA/B,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK7C,WAAW,CAACqD,GAAZ,CAAiBxB,IAAI,iBAClB;AAAK,MAAA,SAAS,EAAC,oBAAf;AACI,MAAA,KAAK,EAAE;AAAC0B,QAAAA,eAAe,EAAG,KAAK1C,sBAAL,CAA4BgB,IAA5B,EAAkCzC,gBAAlC,CAAnB;AACHoE,QAAAA,eAAe,EAAG,KAAKC,kBAAL,CAAwB5B,IAAxB,EAA8BzC,gBAA9B;AADf,OADX;AAGI,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKqB,cAAL,CAAoBT,WAAW,CAAC0D,SAAZ,CAAsBC,KAAK,IAAIA,KAAK,CAACvD,MAAN,KAAiByB,IAAI,CAACzB,MAArD,CAApB,EAAkF,QAAlF;AAA6F,OAHlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4CyB,IAAI,CAACzB,MAAjD,CAJJ,eAKI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0CyB,IAAI,CAAC+B,IAA/C,CALJ,CADH,CADL,CAJJ,CADJ,eAiBI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKvD,SAAS,CAACgD,GAAV,CAAexB,IAAI,iBAChB;AAAK,MAAA,SAAS,EAAC,oBAAf;AACI,MAAA,KAAK,EAAE;AAAC0B,QAAAA,eAAe,EAAG,KAAK1C,sBAAL,CAA4BgB,IAA5B,EAAkCzC,gBAAlC,CAAnB;AACHoE,QAAAA,eAAe,EAAG,KAAKC,kBAAL,CAAwB5B,IAAxB,EAA8BzC,gBAA9B;AADf,OADX;AAGI,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKqB,cAAL,CAAoBJ,SAAS,CAACqD,SAAV,CAAoBC,KAAK,IAAIA,KAAK,CAACvD,MAAN,KAAiByB,IAAI,CAACzB,MAAnD,CAApB,EAAgF,MAAhF;AAAyF,OAH9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4CyB,IAAI,CAACzB,MAAjD,CAJJ,eAKI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0CyB,IAAI,CAAC+B,IAA/C,CALJ,CADH,CADL,CAJJ,CAjBJ,CAfJ,CADJ,CADJ;AAsDH;;AA5LqC;;AA+L1C3E,iBAAiB,CAAC4E,SAAlB,GAA8B;AAC1BvE,EAAAA,SAAS,EAAER,SAAS,CAACgF,MAAV,CAAiBC,UADF;AAE1BjB,EAAAA,YAAY,EAAEhE,SAAS,CAACsB,MAAV,CAAiB2D;AAFL,CAA9B;AAKA,eAAe9E,iBAAf","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './CrosswordBoardApp.css'\nimport SquareSelection from '../../libs/SquareSelection.js'\n\nconst highlightColors = [\"#ffda00\", \"#a7d8ff\"]\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n\n        let currentSelection = new SquareSelection()\n        let i = 0\n        while (this.props.crossword.numbered[0][i] === \"_\") {\n            i++\n        }\n        currentSelection.coords = [0,i]\n        currentSelection.direction = \"Across\"\n\n        this.state = {\n            windowWidth: window.innerWidth,\n            currentSelection: currentSelection,\n            id: this.props.crossword.id,\n            numbered: this.props.crossword.numbered,\n            grid: this.props.crossword.grid,\n            acrossClues: this.props.crossword.acrossClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1),\n            downClues: this.props.crossword.downClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1),\n            clueRefMap: this.props.crossword.clueRefMap\n        }\n\n        this.handleWindowResize = this.handleWindowResize.bind(this)\n        this.clueRowClicked = this.clueRowClicked.bind(this)\n        this.boardSquareClicked = this.boardSquareClicked.bind(this)\n\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n        this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this)\n        this.getClueBackgroundColor = this.getClueBackgroundColor.bind(this)\n    }\n\n    componentDidMount () {\n        console.log(\"Crossword Board App is Mounting...\")\n        window.addEventListener('resize', this.handleWindowResize)\n\n    }\n\n    componentWillUnmount () {\n        console.log(\"Crossword Board App is Unmounting...\")\n        window.removeEventListener('resize', this.handleWindowResize)\n\n        // save state of grid\n    }\n\n    handleWindowResize () {\n        this.setState({\n            windowWidth: window.innerWidth\n        })\n    }\n\n    clueRowClicked (index, listType) {\n        if (listType === \"Across\") {\n            console.log('Clicked across clue with number: ' + this.state.acrossClues[index].number)\n        } else {\n            console.log('Clicked down clue with number: ' + this.state.downClues[index].number)\n        }\n    }\n\n    boardSquareClicked (square) {\n        console.log(\"Clicked square at indices \" + square.rowCoord + \",\" + square.colCoord)\n    }\n\n    getSelectedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        console.log(\"Getting selected squares for selection \" + coords[0] + \",\" + coords[1] + \": \" + direction)\n        let boardSquare = this.state.grid[coords[0]][coords[1]]\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clue = this.state.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            console.log(clue)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen)\n            for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n                selectedCoordList.push([firstCoords[0],i].toString())\n            }\n        } else {\n            let clue = this.state.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen)\n            for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n                selectedCoordList.push([i,firstCoords[1]].toString())\n            }\n        }\n        return selectedCoordList\n    }\n\n    getSquareBackgroundColor (square, selection, highlightedSquares) {\n        console.log(\"getting background color for \" + square.rowCoord + \",\" + square.colCoord + \" and highglighted squares are \" + highlightedSquares)\n        if (square.value === \"_\") return \"black\"\n        let thisSquareKey = [square.rowCoord, square.colCoord].toString()\n        if (highlightedSquares.includes(thisSquareKey)) {\n            console.log(\"Found square to highlight\")\n            if (thisSquareKey == selection.coords.toString()) {\n                return highlightColors[0]\n            } else {\n                return highlightColors[1]\n            }\n        }\n        return \"white\"\n    }\n    \n    getClueBackgroundColor (clue, selection) {\n        let selectedSquare = this.state.grid[selection.coords[0]][selection.coords[1]]\n        if (clue.direction === \"ACROSS\" && clue.number === selectedSquare.acrossClueNum) {\n            if (selection.direction === \"Across\") {\n                return highlightColors[1]\n            } else {\n                return highlightColors[0]\n            }\n        } else if (clue.direction === \"DOWN\" && clue.number === selectedSquare.downClueNum) {\n            if (selection.direction === \"Down\") {\n                return highlightColors[1]\n            } else {\n                return highlightColors[0]\n            }\n        }\n        return \"white\"\n    }\n\n    render () {\n        const { windowWidth, currentSelection, id, numbered, grid, acrossClues, downClues, clueRefMap } = this.state\n        let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightedSquares = this.getSelectedSquares(currentSelection)\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( row =>\n                            <div style={{height : rowPx}}>\n                                {row.map( square => \n                                    <div className={\"crossword-square\"} onClick={() => { this.boardSquareClicked(square) }}\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)}}>\n                                        {square.value === '?' || square.value === '_' ? '' : square.value}\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <div className=\"crossword-clue-list\">\n                            <div className=\"crossword-clue-list-title\">\n                                Across\n                            </div>\n                            <div className=\"crossword-clue-scroll\">\n                                {acrossClues.map( clue =>\n                                    <div className=\"crossword-clue-row\"\n                                        style={{backgroundColor : this.getClueBackgroundColor(clue, currentSelection), \n                                            borderLeftColor : this.getClueBorderColor(clue, currentSelection)}}\n                                        onClick={() => { this.clueRowClicked(acrossClues.findIndex(other => other.number === clue.number), \"Across\") }}>\n                                        <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                                        <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"crossword-clue-list\">\n                            <div className=\"crossword-clue-list-title\">\n                                Down\n                            </div>\n                            <div className=\"crossword-clue-scroll\">\n                                {downClues.map( clue =>\n                                    <div className=\"crossword-clue-row\" \n                                        style={{backgroundColor : this.getClueBackgroundColor(clue, currentSelection), \n                                            borderLeftColor : this.getClueBorderColor(clue, currentSelection)}}\n                                        onClick={() => { this.clueRowClicked(downClues.findIndex(other => other.number === clue.number), \"Down\") }}>\n                                        <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                                        <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    boardWidthPx: PropTypes.number.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}