{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/ColorSchemeRow.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stage, Layer, Shape, Text } from 'react-konva';\n\nclass ColorSchemeRow extends Component {\n  render() {\n    const width = this.props.width;\n    const height = this.props.height;\n    return /*#__PURE__*/React.createElement(Stage, {\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Shape, {\n      sceneFunc: (context, shape) => {\n        context.beginPath();\n        context.moveTo(0, 0);\n        context.lineTo(0, height);\n        context.lineTo(width / 3, 0);\n        context.closePath();\n        context.fillStrokeShape(shape);\n      },\n      fill: this.props.colorScheme.colors[3],\n      stroke: \"black\",\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Shape, {\n      sceneFunc: (context, shape) => {\n        context.beginPath();\n        context.moveTo(0, height);\n        context.lineTo(width / 3, 0);\n        context.lineTo(width * 2 / 3, 0);\n        context.lineTo(width / 3, height);\n        context.closePath();\n        context.fillStrokeShape(shape);\n      },\n      fill: this.props.colorScheme.colors[2],\n      stroke: \"black\",\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Shape, {\n      sceneFunc: (context, shape) => {\n        context.beginPath();\n        context.moveTo(width / 3, height);\n        context.lineTo(width * 2 / 3, 0);\n        context.lineTo(width, 0);\n        context.lineTo(width * 2 / 3, height);\n        context.closePath();\n        context.fillStrokeShape(shape);\n      },\n      fill: this.props.colorScheme.colors[1],\n      stroke: \"black\",\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Shape, {\n      sceneFunc: (context, shape) => {\n        context.beginPath();\n        context.moveTo(width * 2 / 3, height);\n        context.lineTo(width, 0);\n        context.lineTo(width, height);\n        context.closePath();\n        context.fillStrokeShape(shape);\n      },\n      fill: this.props.colorScheme.colors[0],\n      stroke: \"black\",\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nColorSchemeRow.propTypes = {\n  colorScheme: PropTypes.object.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n};\nexport default ColorSchemeRow;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/ColorSchemeRow.jsx"],"names":["React","Fragment","Component","PropTypes","Stage","Layer","Shape","Text","ColorSchemeRow","render","width","props","height","context","shape","beginPath","moveTo","lineTo","closePath","fillStrokeShape","colorScheme","colors","propTypes","object","isRequired","number"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Stage, Layer, Shape, Text } from 'react-konva';\n\nclass ColorSchemeRow extends Component {\n\n    render () {\n        const width = this.props.width\n        const height = this.props.height\n        return (\n            <Stage width={width} height={height}>\n                <Layer>\n                    <Shape\n                        sceneFunc={(context, shape) => {\n                            context.beginPath()\n                            context.moveTo(0,0)\n                            context.lineTo(0, height)\n                            context.lineTo(width / 3, 0)\n                            context.closePath()\n                            context.fillStrokeShape(shape)\n                        }}\n                        fill={this.props.colorScheme.colors[3]}\n                        stroke=\"black\"\n                        strokeWidth={1}\n                    />\n                    <Shape\n                        sceneFunc={(context, shape) => {\n                            context.beginPath()\n                            context.moveTo(0, height)\n                            context.lineTo(width / 3, 0)\n                            context.lineTo(width * 2 / 3, 0)\n                            context.lineTo(width / 3, height)\n                            context.closePath()\n                            context.fillStrokeShape(shape)\n                        }}\n                        fill={this.props.colorScheme.colors[2]}\n                        stroke=\"black\"\n                        strokeWidth={1}\n                    />\n                    <Shape\n                        sceneFunc={(context, shape) => {\n                            context.beginPath()\n                            context.moveTo(width / 3, height)\n                            context.lineTo(width * 2 / 3, 0)\n                            context.lineTo(width, 0)\n                            context.lineTo(width * 2 / 3, height)\n                            context.closePath()\n                            context.fillStrokeShape(shape)\n                        }}\n                        fill={this.props.colorScheme.colors[1]}\n                        stroke=\"black\"\n                        strokeWidth={1}\n                    />\n                    <Shape\n                        sceneFunc={(context, shape) => {\n                            context.beginPath()\n                            context.moveTo(width * 2 / 3, height)\n                            context.lineTo(width, 0)\n                            context.lineTo(width, height)\n                            context.closePath()\n                            context.fillStrokeShape(shape)\n                        }}\n                        fill={this.props.colorScheme.colors[0]}\n                        stroke=\"black\"\n                        strokeWidth={1}\n                    />\n                </Layer>\n            </Stage>\n        )\n    }\n}\n\nColorSchemeRow.propTypes = {\n    colorScheme: PropTypes.object.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired\n}\n\nexport default ColorSchemeRow"]},"metadata":{},"sourceType":"module"}