{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/CrosswordBoardApp.css';\nimport SquareSelection from '../libs/SquareSelection.js';\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    this.numbered = this.props.crossword.numbered;\n    this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.downClues = this.props.crossword.downClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.clueRefMap = this.props.crossword.clueRefMap;\n    this.acrossClueTop = React.createRef();\n    this.downClueTop = React.createRef();\n    let currentSelection = new SquareSelection();\n    let i = 0;\n\n    while (this.props.crossword.numbered[0][i] === \"_\") {\n      i++;\n    }\n\n    currentSelection.coords = [0, i];\n    currentSelection.direction = \"Across\";\n    this.state = {\n      windowWidth: window.innerWidth,\n      currentSelection: currentSelection,\n      grid: this.props.crossword.grid\n    };\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n    this.clueRowClicked = this.clueRowClicked.bind(this);\n    this.boardSquareClicked = this.boardSquareClicked.bind(this);\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n    this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this);\n  }\n\n  componentDidUpdate() {\n    console.log(\"Crossword Board App updated...\");\n  }\n\n  componentDidMount() {\n    console.log(\"Crossword Board App is Mounting...\");\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Crossword Board App is Unmounting...\");\n    window.removeEventListener('resize', this.handleWindowResize); // save state of grid\n  }\n\n  handleWindowResize() {\n    this.setState({\n      windowWidth: window.innerWidth\n    });\n  }\n\n  clueRowClicked(index, listType) {\n    if (listType === \"Across\") {\n      console.log('Clicked across clue with number: ' + this.acrossClues[index].number);\n    } else {\n      console.log('Clicked down clue with number: ' + this.downClues[index].number);\n    }\n  }\n\n  boardSquareClicked(square) {\n    if (square.value === \"_\") {\n      return;\n    }\n\n    let selection = this.state.currentSelection;\n\n    if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n      selection.flipDirection();\n    } else {\n      selection.moveTo([square.rowCoord, square.colCoord]);\n    }\n\n    this.setState({\n      currentSelection: selection\n    });\n  }\n\n  getSelectedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    let boardSquare = this.state.grid[coords[0]][coords[1]];\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n\n      for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n        selectedCoordList.push([firstCoords[0], i].toString());\n      }\n    } else {\n      let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n\n      for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n        selectedCoordList.push([i, firstCoords[1]].toString());\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  getSquareBackgroundColor(square, selection, highlightedSquares) {\n    if (square.value === \"_\") return \"black\";\n    let thisSquareKey = [square.rowCoord, square.colCoord].toString();\n\n    if (highlightedSquares.includes(thisSquareKey)) {\n      if (thisSquareKey == selection.coords.toString()) {\n        return this.props.settings.colorScheme.colors[1];\n      } else {\n        return this.props.settings.colorScheme.colors[2];\n      }\n    }\n\n    return \"white\";\n  }\n\n  render() {\n    const {\n      windowWidth,\n      currentSelection,\n      grid\n    } = this.state;\n    let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightedSquares = this.getSelectedSquares(currentSelection);\n    /*const acrossClueObjs = document.getElementById(\"across-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n    const curAcrossClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum\n    const curAcrossClueInd = this.acrossClues.findIndex(c => c.number === curAcrossClueNum)\n    const acrossScrollTop = acrossClueObjs[curAcrossClueInd].offsetTop - acrossClueObjs[0].offsetTop\n     const downClueObjs = document.getElementById(\"down-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n    const curDownClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum\n    const curDownClueInd = this.downClues.findIndex(c => c.number === curDownClueNum)\n    const downScrollTop = downClueObjs[curDownClueInd].offsetTop - downClueObjs[0].offsetTop*/\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }\n    }, row.map((square, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: j,\n      className: \"crossword-square\",\n      onClick: () => {\n        this.boardSquareClicked(square);\n      },\n      style: {\n        width: squarePx,\n        height: squarePx,\n        backgroundColor: this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-number\",\n      style: {\n        fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }, this.numbered[i][j] != \"_\" && this.numbered[i][j] != \"0\" ? this.numbered[i][j] : \"\"), square.value === '?' || square.value === '_' ? '' : square.value))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    }, \"Across\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      id: \"down-clue-scroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, this.acrossClues.map((clue, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"crossword-clue-row\",\n      style: {\n        backgroundColor: this.getClueBackgroundColor(clue, currentSelection),\n        borderLeftColor: this.getClueBorderColor(clue, currentSelection)\n      },\n      onClick: () => {\n        this.clueRowClicked(this.acrossClues.findIndex(other => other.number === clue.number), \"Across\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 41\n      }\n    }, clue.text))))))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  boardWidthPx: PropTypes.number.isRequired,\n  settings: PropTypes.object.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","SquareSelection","CrosswordBoardApp","constructor","props","numbered","crossword","acrossClues","sort","c1","c2","number","downClues","clueRefMap","acrossClueTop","createRef","downClueTop","currentSelection","i","coords","direction","state","windowWidth","window","innerWidth","grid","handleWindowResize","bind","clueRowClicked","boardSquareClicked","getSelectedSquares","getSquareBackgroundColor","componentDidUpdate","console","log","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","setState","index","listType","square","value","selection","rowCoord","colCoord","flipDirection","moveTo","boardSquare","selectedCoordList","clue","find","acrossClueNum","firstCoords","wordLen","answerLength","push","toString","downClueNum","highlightedSquares","thisSquareKey","includes","settings","colorScheme","colors","render","clueWidthPx","boardPx","boardWidthPx","boardSize","length","rowPx","squarePx","width","height","map","row","j","backgroundColor","fontSize","getClueBackgroundColor","borderLeftColor","getClueBorderColor","findIndex","other","text","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/CrosswordBoardApp.css'\nimport SquareSelection from '../libs/SquareSelection.js'\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n\n        this.numbered = this.props.crossword.numbered\n        this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.downClues = this.props.crossword.downClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.clueRefMap = this.props.crossword.clueRefMap\n\n        this.acrossClueTop = React.createRef();\n        this.downClueTop = React.createRef();\n        \n        let currentSelection = new SquareSelection()\n        let i = 0\n        while (this.props.crossword.numbered[0][i] === \"_\") {\n            i++\n        }\n        currentSelection.coords = [0,i]\n        currentSelection.direction = \"Across\"\n\n        this.state = {\n            windowWidth: window.innerWidth,\n            currentSelection: currentSelection,\n            grid: this.props.crossword.grid\n        }\n\n        this.handleWindowResize = this.handleWindowResize.bind(this)\n        this.clueRowClicked = this.clueRowClicked.bind(this)\n        this.boardSquareClicked = this.boardSquareClicked.bind(this)\n\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n        this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this)\n    }\n\n    componentDidUpdate () {\n        console.log(\"Crossword Board App updated...\")\n    }\n\n    componentDidMount () {\n        console.log(\"Crossword Board App is Mounting...\")\n        window.addEventListener('resize', this.handleWindowResize)\n\n    }\n\n    componentWillUnmount () {\n        console.log(\"Crossword Board App is Unmounting...\")\n        window.removeEventListener('resize', this.handleWindowResize)\n\n        // save state of grid\n    }\n\n    handleWindowResize () {\n        this.setState({\n            windowWidth: window.innerWidth\n        })\n    }\n\n    clueRowClicked (index, listType) {\n        if (listType === \"Across\") {\n            console.log('Clicked across clue with number: ' + this.acrossClues[index].number)\n        } else {\n            console.log('Clicked down clue with number: ' + this.downClues[index].number)\n        }\n    }\n\n    boardSquareClicked (square) {\n        if (square.value === \"_\") {\n            return\n        }\n        let selection = this.state.currentSelection\n        if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n            selection.flipDirection()\n        } else {\n            selection.moveTo([square.rowCoord, square.colCoord])\n        }\n        this.setState({\n            currentSelection: selection\n        })\n    }\n\n    getSelectedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        let boardSquare = this.state.grid[coords[0]][coords[1]]\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n                selectedCoordList.push([firstCoords[0],i].toString())\n            }\n        } else {\n            let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n                selectedCoordList.push([i,firstCoords[1]].toString())\n            }\n        }\n        return selectedCoordList\n    }\n\n    getSquareBackgroundColor (square, selection, highlightedSquares) {\n        if (square.value === \"_\") return \"black\"\n        let thisSquareKey = [square.rowCoord, square.colCoord].toString()\n        if (highlightedSquares.includes(thisSquareKey)) {\n            if (thisSquareKey == selection.coords.toString()) {\n                return this.props.settings.colorScheme.colors[1]\n            } else {\n                return this.props.settings.colorScheme.colors[2]\n            }\n        }\n        return \"white\"\n    }\n\n    render () {\n        const { windowWidth, currentSelection, grid } = this.state\n\n\n        let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightedSquares = this.getSelectedSquares(currentSelection)\n\n        /*const acrossClueObjs = document.getElementById(\"across-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n        const curAcrossClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum\n        const curAcrossClueInd = this.acrossClues.findIndex(c => c.number === curAcrossClueNum)\n        const acrossScrollTop = acrossClueObjs[curAcrossClueInd].offsetTop - acrossClueObjs[0].offsetTop\n\n        const downClueObjs = document.getElementById(\"down-clue-scroll\").getElementsByClassName(\"crossword-clue-row\")\n        const curDownClueNum = grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum\n        const curDownClueInd = this.downClues.findIndex(c => c.number === curDownClueNum)\n        const downScrollTop = downClueObjs[curDownClueInd].offsetTop - downClueObjs[0].offsetTop*/\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( (row, i) =>\n                            <div key={i} style={{height : rowPx}}>\n                                {row.map( (square, j) => \n                                    <div key={j} className={\"crossword-square\"} onClick={() => { this.boardSquareClicked(square) }}\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : this.getSquareBackgroundColor(square, currentSelection, highlightedSquares)}}>\n                                        <div className=\"board-square-number\" \n                                            style={{fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`}}>\n                                            {this.numbered[i][j] != \"_\" && this.numbered[i][j] != \"0\" ? this.numbered[i][j] : \"\"}</div>\n                                        {square.value === '?' || square.value === '_' ? '' : square.value}\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <div className=\"crossword-clue-list\">\n                            <div className=\"crossword-clue-list-title\">\n                                Across\n                            </div>\n                            <div className=\"crossword-clue-scroll\" id=\"down-clue-scroll\">\n                                {this.acrossClues.map( (clue,i) =>\n                                    <div key={i} className=\"crossword-clue-row\"\n                                        style={{backgroundColor : this.getClueBackgroundColor(clue, currentSelection), \n                                            borderLeftColor : this.getClueBorderColor(clue, currentSelection)}}\n                                        onClick={() => { this.clueRowClicked(this.acrossClues.findIndex(other => other.number === clue.number), \"Across\") }}>\n                                        <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                                        <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    boardWidthPx: PropTypes.number.isRequired,\n    settings: PropTypes.object.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}