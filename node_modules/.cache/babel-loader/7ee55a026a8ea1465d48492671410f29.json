{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CrosswordBoardApp.css';\nimport SquareSelection from '../../libs/SquareSelection.js';\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    let currentSelection = new SquareSelection();\n    let i = 0;\n\n    while (this.props.crossword.numbered[0][i] === \"_\") {\n      i++;\n    }\n\n    currentSelection.coords = [0, i];\n    currentSelection.direction = \"Across\";\n    this.state = {\n      windowWidth: window.innerWidth,\n      currentSelection: currentSelection,\n      id: this.props.crossword.id,\n      numbered: this.props.crossword.numbered,\n      grid: this.props.crossword.grid,\n      acrossClues: this.props.crossword.acrossClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1),\n      downClues: this.props.crossword.downClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1),\n      clueRefMap: this.props.crossword.clueRefMap\n    };\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n    this.clueRowClicked = this.clueRowClicked.bind(this);\n    this.boardSquareClicked = this.boardSquareClicked.bind(this);\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"Crossword Board App is Mounting...\");\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Crossword Board App is Unmounting...\");\n    window.removeEventListener('resize', this.handleWindowResize); // save state of grid\n  }\n\n  handleWindowResize() {\n    this.setState({\n      windowWidth: window.innerWidth\n    });\n  }\n\n  clueRowClicked(index, listType) {\n    if (listType === \"Across\") {\n      console.log('Clicked across clue with number: ' + this.state.acrossClues[index].number);\n    } else {\n      console.log('Clicked down clue with number: ' + this.state.downClues[index].number);\n    }\n  }\n\n  boardSquareClicked(square) {\n    console.log(\"Clicked square at indices \" + square.rowCoord + \",\" + square.colCoord);\n  }\n\n  getSelectedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    console.log(\"Getting selected squares for selection \" + coords[0] + \",\" + coords[1] + \": \" + direction);\n    let boardSquare = this.state.grid[coords[0]][coords[1]];\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clue = this.state.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      console.log(clue);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n      console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen);\n\n      for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n        selectedCoordList.push([firstCoords[0], i]);\n      }\n    } else {\n      let clue = this.state.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      let firstCoords = [clue.rowCoord, clue.colCoord];\n      let wordLen = clue.answerLength;\n      console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen);\n\n      for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n        selectedCoordList.push([i, firstCoords[1]]);\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  render() {\n    const {\n      windowWidth,\n      currentSelection,\n      id,\n      numbered,\n      grid,\n      acrossClues,\n      downClues,\n      clueRefMap\n    } = this.state;\n    let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightColors = [\"#ffda00\", \"#a7d8ff\"];\n    const affectedSquares = this.getSelectedSquares(currentSelection);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, grid.map(row => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    }, row.map(square => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-square\",\n      onClick: () => {\n        this.boardSquareClicked(square);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 37\n      }\n    }, \"style=\", {\n      width: squarePx,\n      height: squarePx,\n      backgroundColor: `${square.value === \"_\" ? \"black\" : `${highlightedSquares.includes([square.rowCoord, square.colCoord]) ? `${square.rowCoord === currentSelection.coords[0] && square.colCoord === currentSelection.coords[1] ? highlightColors[0] : highlightColors[1]}` : \"white\"}`}`\n    }, \">\", square.value === '?' || square.value === '_' ? '' : square.value))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }, \"Across\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }\n    }, acrossClues.map(clue => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row\",\n      onClick: () => {\n        this.clueRowClicked(acrossClues.findIndex(other => other.number === clue.number), \"Across\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 41\n      }\n    }, clue.text))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }, \"Down\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 29\n      }\n    }, downClues.map(clue => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row\",\n      onClick: () => {\n        this.clueRowClicked(downClues.findIndex(other => other.number === clue.number), \"Down\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 41\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 41\n      }\n    }, clue.text))))))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  boardWidthPx: PropTypes.number.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","SquareSelection","CrosswordBoardApp","constructor","props","currentSelection","i","crossword","numbered","coords","direction","state","windowWidth","window","innerWidth","id","grid","acrossClues","sort","c1","c2","number","downClues","clueRefMap","handleWindowResize","bind","clueRowClicked","boardSquareClicked","getSelectedSquares","componentDidMount","console","log","addEventListener","componentWillUnmount","removeEventListener","setState","index","listType","square","rowCoord","colCoord","selection","boardSquare","selectedCoordList","clue","find","acrossClueNum","firstCoords","wordLen","answerLength","push","downClueNum","render","clueWidthPx","boardPx","boardWidthPx","boardSize","length","rowPx","squarePx","highlightColors","affectedSquares","width","height","map","row","backgroundColor","value","highlightedSquares","includes","findIndex","other","text","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './CrosswordBoardApp.css'\nimport SquareSelection from '../../libs/SquareSelection.js'\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n\n        let currentSelection = new SquareSelection()\n        let i = 0\n        while (this.props.crossword.numbered[0][i] === \"_\") {\n            i++\n        }\n        currentSelection.coords = [0,i]\n        currentSelection.direction = \"Across\"\n\n        this.state = {\n            windowWidth: window.innerWidth,\n            currentSelection: currentSelection,\n            id: this.props.crossword.id,\n            numbered: this.props.crossword.numbered,\n            grid: this.props.crossword.grid,\n            acrossClues: this.props.crossword.acrossClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1),\n            downClues: this.props.crossword.downClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1),\n            clueRefMap: this.props.crossword.clueRefMap\n        }\n\n        this.handleWindowResize = this.handleWindowResize.bind(this)\n        this.clueRowClicked = this.clueRowClicked.bind(this)\n        this.boardSquareClicked = this.boardSquareClicked.bind(this)\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n    }\n\n    componentDidMount () {\n        console.log(\"Crossword Board App is Mounting...\")\n        window.addEventListener('resize', this.handleWindowResize)\n\n    }\n\n    componentWillUnmount () {\n        console.log(\"Crossword Board App is Unmounting...\")\n        window.removeEventListener('resize', this.handleWindowResize)\n\n        // save state of grid\n    }\n\n    handleWindowResize () {\n        this.setState({\n            windowWidth: window.innerWidth\n        })\n    }\n\n    clueRowClicked (index, listType) {\n        if (listType === \"Across\") {\n            console.log('Clicked across clue with number: ' + this.state.acrossClues[index].number)\n        } else {\n            console.log('Clicked down clue with number: ' + this.state.downClues[index].number)\n        }\n    }\n\n    boardSquareClicked (square) {\n        console.log(\"Clicked square at indices \" + square.rowCoord + \",\" + square.colCoord)\n    }\n\n    getSelectedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        console.log(\"Getting selected squares for selection \" + coords[0] + \",\" + coords[1] + \": \" + direction)\n        let boardSquare = this.state.grid[coords[0]][coords[1]]\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clue = this.state.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            console.log(clue)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen)\n            for (let i = firstCoords[1]; i < firstCoords[1] + wordLen; i++) {\n                selectedCoordList.push([firstCoords[0],i])\n            }\n        } else {\n            let clue = this.state.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            let firstCoords = [clue.rowCoord, clue.colCoord]\n            let wordLen = clue.answerLength\n            console.log(\"Found first coords \" + firstCoords[0] + \",\" + firstCoords[1] + \" and length \" + wordLen)\n            for (let i = firstCoords[0]; i < firstCoords[0] + wordLen; i++) {\n                selectedCoordList.push([i,firstCoords[1]])\n            }\n        }\n        return selectedCoordList\n    }\n\n    render () {\n        const { windowWidth, currentSelection, id, numbered, grid, acrossClues, downClues, clueRefMap } = this.state\n        let clueWidthPx = \"\" + (windowWidth - 790 - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightColors = [\"#ffda00\", \"#a7d8ff\"]\n        const affectedSquares = this.getSelectedSquares(currentSelection)\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( row =>\n                            <div style={{height : rowPx}}>\n                                {row.map( square => \n                                    <div className={\"crossword-square\"} onClick={() => { this.boardSquareClicked(square) }}>\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : `${square.value === \"_\" ? \"black\" : \n                                                `${highlightedSquares.includes([square.rowCoord, square.colCoord]) ? \n                                                    `${square.rowCoord === currentSelection.coords[0] && square.colCoord === currentSelection.coords[1] \n                                                        ? highlightColors[0] : highlightColors[1]}`: \"white\"}`}`}}>\n                                        {square.value === '?' || square.value === '_' ? '' : square.value}\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <div className=\"crossword-clue-list\">\n                            <div className=\"crossword-clue-list-title\">\n                                Across\n                            </div>\n                            <div className=\"crossword-clue-scroll\">\n                                {acrossClues.map( clue =>\n                                    <div className=\"crossword-clue-row\" \n                                        onClick={() => { this.clueRowClicked(acrossClues.findIndex(other => other.number === clue.number), \"Across\") }}>\n                                        <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                                        <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"crossword-clue-list\">\n                            <div className=\"crossword-clue-list-title\">\n                                Down\n                            </div>\n                            <div className=\"crossword-clue-scroll\">\n                                {downClues.map( clue =>\n                                    <div className=\"crossword-clue-row\"\n                                        onClick={() => { this.clueRowClicked(downClues.findIndex(other => other.number === clue.number), \"Down\") }}>\n                                        <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                                        <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    boardWidthPx: PropTypes.number.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}