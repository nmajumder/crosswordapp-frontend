{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordClueScroll.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport '../css/CrosswordBoardApp.css';\n\nclass CrosswordClueScroll extends Component {\n  constructor(props) {\n    super(props);\n    this.scrollRef = React.createRef();\n    this.clueRefs = [];\n\n    for (let clue of this.props.clueList) {\n      this.clueRefs.push(React.createRef());\n    }\n\n    this.getClueBackgroundColor = this.getClueBackgroundColor.bind(this);\n    this.getClueBorderColor = this.getClueBorderColor.bind(this);\n  }\n\n  componentDidUpdate() {\n    console.log(\"Component clue scroll updating...\");\n    let selectedInd = this.props.clueList.findIndex(c => c.number === this.props.selectedClue.number);\n    console.log(this.clueRefs[selectedInd].current.offsetTop);\n    console.log(this.scrollRef.current.offsetTop);\n    this.scrollRef.current.scrollTop = ReactDOM.findDOMNode(this.clueRefs[selectedInd].current).scrollTop; //topRef.scrollTop = this.props.scrollTop\n  }\n\n  getClueBackgroundColor(clue) {\n    if (clue.number === this.props.selectedClue.number && this.props.isMatchingDirection) {\n      return this.props.settings.colorScheme.colors[2];\n    }\n\n    return \"white\";\n  }\n\n  getClueBorderColor(clue) {\n    if (clue.number === this.props.selectedClue.number) {\n      return this.props.settings.colorScheme.colors[2];\n    }\n\n    return \"white\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-list-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, this.props.listTitle), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-scroll\",\n      ref: this.scrollRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, this.props.clueList.map((clue, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      ref: this.clueRefs[i],\n      className: \"crossword-clue-row\",\n      onClick: () => {\n        this.props.clueClicked(clue);\n      },\n      style: {\n        backgroundColor: this.getClueBackgroundColor(clue),\n        borderLeftColor: this.getClueBorderColor(clue)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 29\n      }\n    }, clue.number), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-row-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 29\n      }\n    }, clue.text)))));\n  }\n\n}\n\nCrosswordClueScroll.propTypes = {\n  listTitle: PropTypes.string.isRequired,\n  clueList: PropTypes.array.isRequired,\n  selectedClue: PropTypes.object.isRequired,\n  isMatchingDirection: PropTypes.bool.isRequired,\n  clueClicked: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired\n};\nexport default CrosswordClueScroll;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordClueScroll.jsx"],"names":["React","Component","ReactDOM","PropTypes","CrosswordClueScroll","constructor","props","scrollRef","createRef","clueRefs","clue","clueList","push","getClueBackgroundColor","bind","getClueBorderColor","componentDidUpdate","console","log","selectedInd","findIndex","c","number","selectedClue","current","offsetTop","scrollTop","findDOMNode","isMatchingDirection","settings","colorScheme","colors","render","listTitle","map","i","clueClicked","backgroundColor","borderLeftColor","text","propTypes","string","isRequired","array","object","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types'\nimport '../css/CrosswordBoardApp.css'\n\nclass CrosswordClueScroll extends Component {\n    constructor (props) {\n        super(props)\n\n        this.scrollRef = React.createRef()\n        this.clueRefs = []\n        for (let clue of this.props.clueList) {\n            this.clueRefs.push(React.createRef())\n        }\n        this.getClueBackgroundColor = this.getClueBackgroundColor.bind(this)\n        this.getClueBorderColor = this.getClueBorderColor.bind(this)\n    }\n\n    componentDidUpdate() {\n        console.log(\"Component clue scroll updating...\")\n        let selectedInd = this.props.clueList.findIndex(c => c.number === this.props.selectedClue.number)\n        console.log(this.clueRefs[selectedInd].current.offsetTop)\n        console.log(this.scrollRef.current.offsetTop)\n        this.scrollRef.current.scrollTop = ReactDOM.findDOMNode( this.clueRefs[selectedInd].current ).scrollTop\n\n        //topRef.scrollTop = this.props.scrollTop\n    }\n\n    getClueBackgroundColor (clue) {\n        if (clue.number === this.props.selectedClue.number && this.props.isMatchingDirection) {\n            return this.props.settings.colorScheme.colors[2]\n        }\n        return \"white\"\n    }\n\n    getClueBorderColor (clue) {\n        if (clue.number === this.props.selectedClue.number) {\n            return this.props.settings.colorScheme.colors[2]\n        }   \n        return \"white\"\n    }\n\n    render () {\n        return (\n            <div className=\"crossword-clue-list\">\n                <div className=\"crossword-clue-list-title\">\n                    {this.props.listTitle}\n                </div>\n                <div className=\"crossword-clue-scroll\" ref={this.scrollRef}>\n                    {this.props.clueList.map( (clue,i) =>\n                        <div key={i} ref={this.clueRefs[i]} className=\"crossword-clue-row\" onClick={() => { this.props.clueClicked(clue) }}\n                            style={{backgroundColor : this.getClueBackgroundColor(clue), borderLeftColor : this.getClueBorderColor(clue)}}>\n                            <div className=\"crossword-clue-row-number\">{clue.number}</div>\n                            <div className=\"crossword-clue-row-text\">{clue.text}</div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nCrosswordClueScroll.propTypes = {\n    listTitle: PropTypes.string.isRequired,\n    clueList: PropTypes.array.isRequired,\n    selectedClue: PropTypes.object.isRequired,\n    isMatchingDirection: PropTypes.bool.isRequired,\n    clueClicked: PropTypes.func.isRequired,\n    settings: PropTypes.object.isRequired\n}\n\nexport default CrosswordClueScroll\n\n"]},"metadata":{},"sourceType":"module"}