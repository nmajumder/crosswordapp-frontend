{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/CrosswordBoardApp.css';\nimport SquareSelection from '../libs/SquareSelection.js';\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx';\nimport CrosswordKeyActions from '../libs/CrosswordKeyActions.js';\nimport api from '../libs/api.js';\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.downClues = this.props.crossword.downClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.clueRefMap = this.props.crossword.clueRefMap;\n    this.board = this.props.crossword.board;\n    let currentSelection = new SquareSelection(this.props.crossword.board.selection.rowCoord, this.props.crossword.board.selection.colCoord, this.props.crossword.board.selection.direction);\n    this.state = {\n      currentSelection: currentSelection,\n      grid: this.board.grid,\n      lastSavedGrid: this.board.grid\n    };\n    this.clueClicked = this.clueClicked.bind(this);\n    this.boardSquareClicked = this.boardSquareClicked.bind(this);\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n    this.getReferencedSquares = this.getReferencedSquares.bind(this);\n    this.getSquaresOfClue = this.getSquaresOfClue.bind(this);\n    this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.saveGridState = this.saveGridState.bind(this);\n    this.crosswordIsComplete = this.crosswordIsComplete.bind(this);\n    this.saveSelection = this.saveSelection.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"Crossword Board App is Mounting...\");\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    this.board = this.props.crossword.board;\n    let currentSelection = new SquareSelection(this.board.selection.rowCoord, this.board.selection.colCoord, this.board.selection.direction);\n    this.setState({\n      currentSelection: currentSelection\n    });\n  }\n\n  componentWillUnmount() {\n    console.log(\"Crossword Board App is Unmounting...\");\n    document.removeEventListener(\"keydown\", this.onKeyDown, false); // save state of grid\n\n    this.saveGridState(this.board);\n  }\n\n  saveSelection(selection) {\n    this.board.selection.rowCoord = selection.coords[0];\n    this.board.selection.colCoord = selection.coords[1];\n    this.board.selection.direction = selection.direction;\n    this.setState({\n      currentSelection: selection\n    });\n  }\n\n  async saveGridState() {\n    let response;\n    let requestSuccess = false;\n\n    try {\n      console.log('Saving crossword state...');\n      console.log(this.board);\n      response = await api.updateCrossword(this.props.crossword.id, \"ME\", this.board);\n      console.log(response);\n      requestSuccess = response.status === 200;\n    } catch (error) {\n      requestSuccess = false;\n    }\n\n    if (!requestSuccess) {\n      console.log(\"Unable to save state of crossword\");\n    } else {\n      this.setState({\n        lastSavedGrid: this.state.grid\n      });\n    }\n  }\n\n  async crosswordIsComplete(showNotComplete) {\n    let response;\n    let requestSuccess = false;\n\n    try {\n      console.log('Checking whether crossword is finished...');\n      console.log(this.board);\n      response = await api.crosswordIsComplete(this.props.crossword.id, \"ME\", this.board);\n      console.log(response);\n      requestSuccess = response.status === 200;\n    } catch (error) {\n      requestSuccess = false;\n    }\n\n    if (requestSuccess) {\n      if (response.data) {\n        this.props.crosswordFinished();\n      } else {\n        if (showNotComplete) {\n          this.props.crosswordUnfinished();\n        }\n      }\n    }\n  }\n\n  onKeyDown(event) {\n    console.log(event); // if special key pressed, allow default action\n\n    if (event.ctrlKey || event.altKey || event.metaKey) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (this.props.typingDisabled) {\n      return;\n    }\n\n    let selection = this.state.currentSelection;\n\n    if (event.which === 13 || event.which === 9) {\n      // enter or tab\n      selection = CrosswordKeyActions.tabOrEnter(this.state.grid, selection, event.shiftKey, this.acrossClues, this.downClues);\n    } else if (event.which === 8) {\n      // delete\n      selection = CrosswordKeyActions.delete(this.state.grid, selection);\n    } else if (event.which === 37) {\n      // left arrow\n      selection = CrosswordKeyActions.leftArrow(this.state.grid, selection);\n    } else if (event.which === 38) {\n      // up arrow\n      selection = CrosswordKeyActions.upArrow(this.state.grid, selection);\n    } else if (event.which === 39) {\n      // right arrow\n      selection = CrosswordKeyActions.rightArrow(this.state.grid, selection);\n    } else if (event.which === 40) {\n      // down arrow\n      selection = CrosswordKeyActions.downArrow(this.state.grid, selection);\n    } else {\n      let gridWasFull = CrosswordKeyActions.gridIsFull(this.state.grid);\n\n      if (event.which >= 65 && event.which <= 90) {\n        // a to z\n        selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key.toUpperCase());\n      } else if (event.which >= 48 && event.which <= 57) {\n        // 0 to 9 or the symbols on the same keys\n        selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key);\n      } else if (event.which >= 186 && event.which <= 222) {\n        // various symbols that we want to allow in case of special themed puzzle\n        // disallow the underscore because it is reserved for black squares\n        if (event.key === \"_\") {\n          return;\n        }\n\n        selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key);\n      }\n\n      if (CrosswordKeyActions.gridIsFull(this.state.grid)) {\n        this.crosswordIsComplete(!gridWasFull);\n      }\n    }\n\n    this.saveSelection(selection);\n  }\n\n  clueClicked(clue) {\n    let coords = CrosswordKeyActions.getFirstEmptySpace(this.state.grid, clue);\n\n    if (coords === null) {\n      coords = [clue.rowCoord, clue.colCoord];\n    }\n\n    let selection = this.state.currentSelection;\n    selection.coords = coords;\n    selection.direction = clue.direction;\n    this.saveSelection(selection);\n  }\n\n  boardSquareClicked(square) {\n    if (square.value === \"_\") {\n      return;\n    }\n\n    let selection = this.state.currentSelection;\n\n    if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n      selection.flipDirection();\n    } else {\n      selection.coords = [square.rowCoord, square.colCoord];\n    }\n\n    this.saveSelection(selection);\n  }\n\n  getSelectedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    let boardSquare = this.state.grid[coords[0]][coords[1]];\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n    } else {\n      let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n    }\n\n    return selectedCoordList;\n  }\n\n  getReferencedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clueNum = this.state.grid[coords[0]][coords[1]].acrossClueNum;\n      let clueKey = \"A\" + clueNum;\n\n      if (clueKey in this.clueRefMap) {\n        for (let key of this.clueRefMap[clueKey]) {\n          let clue;\n\n          if (key.substring(0, 1) === \"A\") {\n            clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          } else {\n            clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          }\n\n          selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n        }\n      }\n    } else {\n      let clueNum = this.state.grid[coords[0]][coords[1]].downClueNum;\n      let clueKey = \"D\" + clueNum;\n\n      if (clueKey in this.clueRefMap) {\n        for (let key of this.clueRefMap[clueKey]) {\n          let clue;\n\n          if (key.substring(0, 1) === \"A\") {\n            clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          } else {\n            clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          }\n\n          selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n        }\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  getSquaresOfClue(clue) {\n    const [firstRow, firstCol] = [clue.rowCoord, clue.colCoord];\n    let coordList = [];\n\n    if (clue.direction === \"Across\") {\n      for (let i = firstCol; i < firstCol + clue.answerLength; i++) {\n        coordList.push([firstRow, i].toString());\n      }\n    } else {\n      for (let i = firstRow; i < firstRow + clue.answerLength; i++) {\n        coordList.push([i, firstCol].toString());\n      }\n    }\n\n    return coordList;\n  }\n\n  getSquareBackgroundColor(square, selection, highlightedSquares, referencedSquares) {\n    if (square.value === \"_\") return \"black\";\n    let thisSquareKey = [square.rowCoord, square.colCoord].toString();\n\n    if (highlightedSquares.includes(thisSquareKey)) {\n      if (thisSquareKey === selection.coords.toString()) {\n        return this.props.settings.colorScheme.colors[1];\n      } else {\n        return this.props.settings.colorScheme.colors[2];\n      }\n    } else if (referencedSquares.includes(thisSquareKey)) {\n      return this.props.settings.colorScheme.colors[0];\n    }\n\n    return \"white\";\n  }\n\n  render() {\n    const {\n      currentSelection,\n      grid\n    } = this.state;\n    let clueWidthPx = \"\" + (this.props.windowWidthPx - (this.props.boardWidthPx + 160) - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = this.props.crossword.board.grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightedSquares = this.getSelectedSquares(currentSelection);\n    const referencedSquares = this.getReferencedSquares(currentSelection);\n    const acrossClue = this.acrossClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum);\n    const downClue = this.downClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum);\n    let squareNumberStyle = {\n      fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 9 ? \"9pt\" : \"16pt\"}`}`,\n      marginLeft: `${boardSize <= 9 ? \"5px\" : \"\"}`,\n      marginTop: `${boardSize <= 9 ? \"4px\" : \"\"}`\n    };\n    let squareValueStyle = {\n      width: squarePx,\n      height: squarePx / 2,\n      marginTop: squarePx * 3 / 10,\n      fontSize: `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"44pt\"}`}`\n    };\n\n    if (boardPx > 700) {\n      // handle bigger board on large screens\n      squareNumberStyle[\"fontSize\"] = `${boardSize > 15 ? \"10pt\" : `${boardSize > 10 ? \"13pt\" : \"22pt\"}`}`;\n      squareValueStyle[\"fontSize\"] = `${boardSize > 15 ? \"20pt\" : `${boardSize > 10 ? \"24pt\" : \"64pt\"}`}`;\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }\n    }, grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 29\n      }\n    }, row.map((square, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: j,\n      className: \"crossword-square\",\n      onClick: () => {\n        this.boardSquareClicked(square);\n      },\n      style: {\n        width: squarePx,\n        height: squarePx,\n        backgroundColor: this.getSquareBackgroundColor(square, currentSelection, highlightedSquares, referencedSquares)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-number\",\n      style: squareNumberStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 41\n      }\n    }, grid[i][j].number > 0 ? grid[i][j].number : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-value\",\n      style: squareValueStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 41\n      }\n    }, square.value === \"\" || square.value === '_' ? '' : square.value)))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Across\",\n      clueList: this.acrossClues,\n      selectedClue: acrossClue,\n      isMatchingDirection: currentSelection.direction === 'Across',\n      clueClicked: this.clueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Down\",\n      clueList: this.downClues,\n      selectedClue: downClue,\n      isMatchingDirection: currentSelection.direction === 'Down',\n      clueClicked: this.clueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  typingDisabled: PropTypes.bool.isRequired,\n  boardWidthPx: PropTypes.number.isRequired,\n  windowWidthPx: PropTypes.number.isRequired,\n  settings: PropTypes.object.isRequired,\n  crosswordFinished: PropTypes.func.isRequired,\n  crosswordUnfinished: PropTypes.func.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","SquareSelection","CrosswordClueScroll","CrosswordKeyActions","api","CrosswordBoardApp","constructor","props","acrossClues","crossword","sort","c1","c2","number","downClues","clueRefMap","board","currentSelection","selection","rowCoord","colCoord","direction","state","grid","lastSavedGrid","clueClicked","bind","boardSquareClicked","getSelectedSquares","getReferencedSquares","getSquaresOfClue","getSquareBackgroundColor","onKeyDown","saveGridState","crosswordIsComplete","saveSelection","componentDidMount","console","log","document","addEventListener","setState","componentWillUnmount","removeEventListener","coords","response","requestSuccess","updateCrossword","id","status","error","showNotComplete","data","crosswordFinished","crosswordUnfinished","event","ctrlKey","altKey","metaKey","preventDefault","typingDisabled","which","tabOrEnter","shiftKey","delete","leftArrow","upArrow","rightArrow","downArrow","gridWasFull","gridIsFull","alphaNumeric","key","toUpperCase","clue","getFirstEmptySpace","square","value","flipDirection","boardSquare","selectedCoordList","find","acrossClueNum","concat","downClueNum","clueNum","clueKey","substring","toString","length","firstRow","firstCol","coordList","i","answerLength","push","highlightedSquares","referencedSquares","thisSquareKey","includes","settings","colorScheme","colors","render","clueWidthPx","windowWidthPx","boardWidthPx","boardPx","boardSize","rowPx","squarePx","acrossClue","c","downClue","squareNumberStyle","fontSize","marginLeft","marginTop","squareValueStyle","width","height","map","row","j","backgroundColor","propTypes","object","isRequired","bool","func"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/CrosswordBoardApp.css'\nimport SquareSelection from '../libs/SquareSelection.js'\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx'\nimport CrosswordKeyActions from '../libs/CrosswordKeyActions.js'\nimport api from '../libs/api.js'\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n\n        this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.downClues = this.props.crossword.downClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.clueRefMap = this.props.crossword.clueRefMap\n        this.board = this.props.crossword.board\n        let currentSelection = new SquareSelection(\n            this.props.crossword.board.selection.rowCoord,\n            this.props.crossword.board.selection.colCoord,\n            this.props.crossword.board.selection.direction\n        )\n\n        this.state = {\n            currentSelection: currentSelection,\n            grid: this.board.grid,\n            lastSavedGrid: this.board.grid\n        }\n\n        this.clueClicked = this.clueClicked.bind(this)\n        this.boardSquareClicked = this.boardSquareClicked.bind(this)\n\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n        this.getReferencedSquares = this.getReferencedSquares.bind(this)\n        this.getSquaresOfClue = this.getSquaresOfClue.bind(this)\n        this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this)\n\n        this.onKeyDown = this.onKeyDown.bind(this)\n\n        this.saveGridState = this.saveGridState.bind(this)\n        this.crosswordIsComplete = this.crosswordIsComplete.bind(this)\n        this.saveSelection = this.saveSelection.bind(this)\n    }\n\n    componentDidMount () {\n        console.log(\"Crossword Board App is Mounting...\")\n        document.addEventListener(\"keydown\", this.onKeyDown, false);\n        this.board = this.props.crossword.board\n        let currentSelection = new SquareSelection(\n            this.board.selection.rowCoord,\n            this.board.selection.colCoord,\n            this.board.selection.direction\n        )\n        this.setState({\n            currentSelection: currentSelection\n        })\n    }\n\n    componentWillUnmount () {\n        console.log(\"Crossword Board App is Unmounting...\")\n        document.removeEventListener(\"keydown\", this.onKeyDown, false);\n        // save state of grid\n        this.saveGridState(this.board)\n    }\n\n    saveSelection (selection) {\n        this.board.selection.rowCoord = selection.coords[0]\n        this.board.selection.colCoord = selection.coords[1]\n        this.board.selection.direction = selection.direction\n\n        this.setState({\n            currentSelection: selection\n        })\n    }\n\n    async saveGridState () {\n        let response\n        let requestSuccess = false\n        try {\n            console.log('Saving crossword state...')\n            console.log(this.board)\n            response = await api.updateCrossword(this.props.crossword.id, \"ME\", this.board)\n            console.log(response)\n            requestSuccess = response.status === 200\n        } catch (error) {\n            requestSuccess = false\n        }\n\n        if (!requestSuccess) {\n            console.log(\"Unable to save state of crossword\")\n        } else {\n            this.setState({\n                lastSavedGrid: this.state.grid\n            })\n        }\n    }\n\n    async crosswordIsComplete (showNotComplete) {\n        let response\n        let requestSuccess = false\n        try {\n            console.log('Checking whether crossword is finished...')\n            console.log(this.board)\n            response = await api.crosswordIsComplete(this.props.crossword.id, \"ME\", this.board)\n            console.log(response)\n            requestSuccess = response.status === 200\n        } catch (error) {\n            requestSuccess = false\n        }\n\n        if (requestSuccess) {\n            if (response.data) {\n                this.props.crosswordFinished()\n            } else {\n                if (showNotComplete) {\n                    this.props.crosswordUnfinished()\n                }\n            }\n        }\n    }\n\n    onKeyDown (event) {\n        console.log(event)\n        // if special key pressed, allow default action\n        if (event.ctrlKey || event.altKey || event.metaKey) {\n            return\n        }\n        event.preventDefault()\n        if (this.props.typingDisabled) {\n            return\n        }\n        let selection = this.state.currentSelection\n        if (event.which === 13 || event.which === 9) {\n            // enter or tab\n            selection = CrosswordKeyActions.tabOrEnter(this.state.grid, selection, event.shiftKey, this.acrossClues, this.downClues)\n        } else if (event.which === 8) {\n            // delete\n            selection = CrosswordKeyActions.delete(this.state.grid, selection)\n        } else if (event.which === 37) {\n            // left arrow\n            selection = CrosswordKeyActions.leftArrow(this.state.grid, selection)\n        } else if (event.which === 38) {\n            // up arrow\n            selection = CrosswordKeyActions.upArrow(this.state.grid, selection)\n        } else if (event.which === 39) {\n            // right arrow\n            selection = CrosswordKeyActions.rightArrow(this.state.grid, selection)\n        } else if (event.which === 40) {\n            // down arrow\n            selection = CrosswordKeyActions.downArrow(this.state.grid, selection)\n        } else {\n            let gridWasFull = CrosswordKeyActions.gridIsFull(this.state.grid)\n            if (event.which >= 65 && event.which <= 90) {\n                // a to z\n                selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key.toUpperCase())\n            } else if (event.which >= 48 && event.which <= 57) {\n                // 0 to 9 or the symbols on the same keys\n                selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key)\n            } else if (event.which >= 186 && event.which <= 222) {\n                // various symbols that we want to allow in case of special themed puzzle\n                // disallow the underscore because it is reserved for black squares\n                if (event.key === \"_\") {\n                    return\n                }\n                selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key)\n            }\n            if (CrosswordKeyActions.gridIsFull(this.state.grid)) {\n                this.crosswordIsComplete(!gridWasFull)\n            }\n        }\n        this.saveSelection(selection)\n    }\n\n    clueClicked (clue) {\n        let coords = CrosswordKeyActions.getFirstEmptySpace(this.state.grid, clue)\n        if (coords === null) {\n            coords = [clue.rowCoord, clue.colCoord]\n        }\n        let selection = this.state.currentSelection\n        selection.coords = coords\n        selection.direction = clue.direction\n        this.saveSelection(selection)\n    }\n\n    boardSquareClicked (square) {\n        if (square.value === \"_\") {\n            return\n        }\n        let selection = this.state.currentSelection\n        if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n            selection.flipDirection()\n        } else {\n            selection.coords = [square.rowCoord, square.colCoord]\n        }\n        this.saveSelection(selection)\n    }\n\n    getSelectedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        let boardSquare = this.state.grid[coords[0]][coords[1]]\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n        } else {\n            let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n        }\n        return selectedCoordList\n    }\n\n    getReferencedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clueNum = this.state.grid[coords[0]][coords[1]].acrossClueNum\n            let clueKey = \"A\" + clueNum\n            if (clueKey in this.clueRefMap) {\n                for (let key of this.clueRefMap[clueKey]) {\n                    let clue\n                    if (key.substring(0,1) === \"A\") {\n                        clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1,key.length))\n                    } else {\n                        clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length))\n                    }\n                    selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n                }\n            }\n        } else {\n            let clueNum = this.state.grid[coords[0]][coords[1]].downClueNum\n            let clueKey = \"D\" + clueNum\n            if (clueKey in this.clueRefMap) {\n                for (let key of this.clueRefMap[clueKey]) {\n                    let clue\n                    if (key.substring(0,1) === \"A\") {\n                        clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1,key.length))\n                    } else {\n                        clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length))\n                    }\n                    selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n                }\n            }\n        }\n        return selectedCoordList\n    }\n\n    getSquaresOfClue (clue) {\n        const [firstRow, firstCol] = [clue.rowCoord, clue.colCoord]\n        let coordList = []\n        if (clue.direction === \"Across\") {\n            for (let i = firstCol; i < firstCol + clue.answerLength; i++) {\n                coordList.push([firstRow, i].toString())\n            }\n        } else {\n            for (let i = firstRow; i < firstRow + clue.answerLength; i++) {\n                coordList.push([i, firstCol].toString())\n            }\n        }\n        return coordList\n    }\n\n    getSquareBackgroundColor (square, selection, highlightedSquares, referencedSquares) {\n        if (square.value === \"_\") return \"black\"\n        let thisSquareKey = [square.rowCoord, square.colCoord].toString()\n        if (highlightedSquares.includes(thisSquareKey)) {\n            if (thisSquareKey === selection.coords.toString()) {\n                return this.props.settings.colorScheme.colors[1]\n            } else {\n                return this.props.settings.colorScheme.colors[2]\n            }\n        } else if (referencedSquares.includes(thisSquareKey)) {\n            return this.props.settings.colorScheme.colors[0]\n        }\n        return \"white\"\n    }\n\n    render () {\n        const { currentSelection, grid } = this.state\n\n        let clueWidthPx = \"\" + (this.props.windowWidthPx - (this.props.boardWidthPx + 160) - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = this.props.crossword.board.grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightedSquares = this.getSelectedSquares(currentSelection)\n        const referencedSquares = this.getReferencedSquares(currentSelection)\n\n        const acrossClue = this.acrossClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum)\n        const downClue = this.downClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum)\n\n        let squareNumberStyle = {\n            fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 9 ? \"9pt\" : \"16pt\"}`}`,\n            marginLeft: `${boardSize <= 9 ? \"5px\" : \"\"}`,\n            marginTop: `${boardSize <= 9 ? \"4px\" : \"\"}`\n        }\n        let squareValueStyle = {\n            width: squarePx,\n            height: squarePx/2,\n            marginTop: squarePx*3/10,\n            fontSize: `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"44pt\"}`}`\n        }\n\n        if (boardPx > 700) {\n            // handle bigger board on large screens\n            squareNumberStyle[\"fontSize\"] = `${boardSize > 15 ? \"10pt\" : `${boardSize > 10 ? \"13pt\" : \"22pt\"}`}`\n            squareValueStyle[\"fontSize\"] = `${boardSize > 15 ? \"20pt\" : `${boardSize > 10 ? \"24pt\" : \"64pt\"}`}`\n        }\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( (row, i) =>\n                            <div key={i} style={{height : rowPx}}>\n                                {row.map( (square, j) => \n                                    <div key={j} className={\"crossword-square\"} onClick={() => { this.boardSquareClicked(square) }}\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : this.getSquareBackgroundColor(square, currentSelection, highlightedSquares, referencedSquares)}}>\n                                        <div className=\"board-square-number\" style={squareNumberStyle}>\n                                            {grid[i][j].number > 0 ? grid[i][j].number : \"\"}</div>\n                                        <div className=\"board-square-value\" style={squareValueStyle}>\n                                            {square.value === \"\" || square.value === '_' ? '' : square.value}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <CrosswordClueScroll \n                            listTitle={\"Across\"}\n                            clueList={this.acrossClues}\n                            selectedClue={acrossClue}\n                            isMatchingDirection={currentSelection.direction === 'Across'}\n                            clueClicked={this.clueClicked}\n                            settings={this.props.settings}/>\n                        <CrosswordClueScroll \n                            listTitle={\"Down\"}\n                            clueList={this.downClues}\n                            selectedClue={downClue}\n                            isMatchingDirection={currentSelection.direction === 'Down'}\n                            clueClicked={this.clueClicked}\n                            settings={this.props.settings}/>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    typingDisabled: PropTypes.bool.isRequired,\n    boardWidthPx: PropTypes.number.isRequired,\n    windowWidthPx: PropTypes.number.isRequired,\n    settings: PropTypes.object.isRequired,\n    crosswordFinished: PropTypes.func.isRequired,\n    crosswordUnfinished: PropTypes.func.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}