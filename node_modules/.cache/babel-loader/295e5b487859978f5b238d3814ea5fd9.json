{"ast":null,"code":"class CrosswordKeyActions {\n  alphaNumeric(grid, squareSelection, key) {\n    let [r, c] = squareSelection.coords;\n    let boardSize = grid.length;\n    let wasEmpty = grid[r][c].value === \"\";\n    grid[r][c].value = key;\n\n    if (squareSelection.direction === \"Across\") {\n      if (wasEmpty || c + 1 === boardSize || grid[r][c + 1].value === \"_\") {\n        // find next open square in the word with wrapping\n        let newCoords = this.getNextEmptySpaceWrapping(grid, squareSelection);\n\n        if (newCoords !== null) {\n          squareSelection.coords = newCoords;\n        }\n      } else {\n        // go to next square\n        squareSelection.coords = [r, c + 1];\n      }\n    } else {\n      if (wasEmpty || r + 1 === boardSize || grid[r + 1][c].value === \"_\") {\n        // find next open square in the word with wrapping\n        let newCoords = this.getNextEmptySpaceWrapping(grid, squareSelection);\n\n        if (newCoords !== null) {\n          squareSelection.coords = newCoords;\n        }\n      } else {\n        // go to next square\n        squareSelection.coords = [r + 1, c];\n      }\n    }\n\n    return squareSelection;\n  }\n\n  delete(grid, squareSelection) {\n    let [r, c] = squareSelection.coords;\n    let boardSize = grid.length;\n    let wasEmpty = grid[r][c].value === \"\";\n\n    if (squareSelection.direction === \"Across\") {\n      if (wasEmpty && c - 1 >= 0 && grid[r][c - 1].value !== \"_\") {\n        // move left a square and delete\n        grid[r][c - 1].value = \"\";\n        squareSelection.coords = [r, c - 1];\n      } else {\n        // delete this square and stay put\n        grid[r][c].value = \"\";\n      }\n    } else {\n      if (wasEmpty && r - 1 >= 0 && grid[r - 1][c].value !== \"_\") {\n        // move up a square and delete\n        grid[r - 1][c].value = \"\";\n        squareSelection.coords = [r - 1, c];\n      } else {\n        // delete this square and stay put\n        grid[r][c].value = \"\";\n      }\n    }\n\n    return squareSelection;\n  }\n\n  tabOrEnter(grid, squareSelection, shiftKey, acrossClues, downClues) {\n    let allClues = acrossClues.concat(downClues);\n    let clueInd = allClues.findIndex(c => squareSelection.direction === \"Across\" ? grid[squareSelection.coords[0]][squareSelection.coords[1]].acrossClueNum === c.number && c.direction === \"Across\" : grid[squareSelection.coords[0]][squareSelection.coords[1]].downClueNum === c.number && c.direction === \"Down\");\n    let foundCoords = null;\n\n    if (shiftKey) {\n      // going backwards\n      if (this.gridIsFull(grid)) {\n        // return beginning of prev word\n        clueInd--;\n\n        if (clueInd < 0) {\n          clueInd += allClues.length;\n          squareSelection.flipDirection();\n        }\n\n        squareSelection.coords = [allClues[clueInd].rowCoord, allClues[clueInd].colCoord];\n      } else {\n        // find empty square in previous word\n        while (foundCoords === null) {\n          console.log(\"On clue: \" + allClues[clueInd].number + \" \" + allClues[clueInd].direction);\n          clueInd--;\n\n          if (clueInd < 0) {\n            clueInd += allClues.length;\n            squareSelection.flipDirection();\n          }\n\n          foundCoords = this.getFirstEmptySpace(grid, allClues[clueInd]);\n        }\n\n        squareSelection.coords = foundCoords;\n      }\n    } else {\n      // going forwards\n      if (this.gridIsFull(grid)) {\n        clueInd++;\n\n        if (clueInd >= allClues.length) {\n          clueInd -= allClues.length;\n          squareSelection.flipDirection();\n        }\n\n        squareSelection.coord = [allClues[clueInd].rowCoord, allClues[clueInd].colCoord];\n      } else {\n        // find empty square in next word\n        while (foundCoords === null) {\n          console.log(\"On clue: \" + allClues[clueInd].number + \" \" + allClues[clueInd].direction);\n          clueInd++;\n\n          if (clueInd >= allClues.length) {\n            clueInd -= allClues.length;\n            squareSelection.flipDirection();\n          }\n\n          foundCoords = this.getFirstEmptySpace(grid, allClues[clueInd]);\n        }\n\n        squareSelection.coords = foundCoords;\n      }\n    }\n\n    console.log(\"New square selection: \" + squareSelection);\n    return squareSelection;\n  }\n\n  leftArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Down\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      c--;\n\n      if (c < 0) {\n        c += boardSize;\n        r--;\n\n        if (r < 0) {\n          r += boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        c--;\n\n        if (c < 0) {\n          c += boardSize;\n          r--;\n\n          if (r < 0) {\n            r += boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n  upArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Across\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      r--;\n\n      if (r < 0) {\n        r += boardSize;\n        c--;\n\n        if (c < 0) {\n          c += boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        r--;\n\n        if (r < 0) {\n          r += boardSize;\n          c--;\n\n          if (c < 0) {\n            c += boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n  rightArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Down\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      c++;\n\n      if (c >= boardSize) {\n        c -= boardSize;\n        r++;\n\n        if (r >= boardSize) {\n          r -= boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        c++;\n\n        if (c >= boardSize) {\n          c -= boardSize;\n          r++;\n\n          if (r >= boardSize) {\n            r -= boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n  downArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Across\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      r++;\n\n      if (r >= boardSize) {\n        r -= boardSize;\n        c++;\n\n        if (c >= boardSize) {\n          c -= boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        r++;\n\n        if (r >= boardSize) {\n          r -= boardSize;\n          c++;\n\n          if (c >= boardSize) {\n            c -= boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n  gridIsFull(grid) {\n    let boardSize = grid.length;\n\n    for (let r = 0; r < boardSize; r++) {\n      for (let c = 0; c < boardSize; c++) {\n        if (grid[r][c].value === \"\") {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getFirstEmptySpace(grid, clue) {\n    let [row, col] = [clue.rowCoord, clue.colCoord];\n\n    if (clue.direction === \"Across\") {\n      for (let i = col; i < col + clue.answerLength; i++) {\n        if (grid[row][i].value === \"\") {\n          return [row, i];\n        }\n      }\n    } else {\n      for (let i = row; i < row + clue.answerLength; i++) {\n        if (grid[i][col].value === \"\") {\n          return [i, col];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  getNextEmptySpaceWrapping(grid, squareSelection) {\n    let [r, c] = squareSelection.coords;\n\n    if (squareSelection.direction === \"Across\") {\n      do {\n        c++;\n\n        if (c >= grid.length || grid[r][c].value === \"_\") {\n          // go to beginning of word\n          c = c - grid[r][c - 1].acrossWordIndex - 1;\n        }\n\n        if (grid[r][c].value === \"\") {\n          return [r, c];\n        }\n      } while (c !== squareSelection.coords[1]);\n    } else {\n      do {\n        r++;\n\n        if (r >= grid.length || grid[r][c].value === \"_\") {\n          // go to beginning of word\n          r = r - grid[r - 1][c].downWordIndex - 1;\n        }\n\n        if (grid[r][c].value === \"\") {\n          return [r, c];\n        }\n      } while (r !== squareSelection.coords[0]);\n    }\n\n    return null;\n  }\n\n}\n\nexport default new CrosswordKeyActions();","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/libs/CrosswordKeyActions.js"],"names":["CrosswordKeyActions","alphaNumeric","grid","squareSelection","key","r","c","coords","boardSize","length","wasEmpty","value","direction","newCoords","getNextEmptySpaceWrapping","delete","tabOrEnter","shiftKey","acrossClues","downClues","allClues","concat","clueInd","findIndex","acrossClueNum","number","downClueNum","foundCoords","gridIsFull","flipDirection","rowCoord","colCoord","console","log","getFirstEmptySpace","coord","leftArrow","upArrow","rightArrow","downArrow","clue","row","col","i","answerLength","acrossWordIndex","downWordIndex"],"mappings":"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","sourcesContent":["class CrosswordKeyActions {\n    alphaNumeric (grid, squareSelection, key) {\n        let [r,c] = squareSelection.coords\n        let boardSize = grid.length\n        let wasEmpty = grid[r][c].value === \"\"\n        grid[r][c].value = key\n        if (squareSelection.direction === \"Across\") {\n            if (wasEmpty || c+1 === boardSize || grid[r][c+1].value === \"_\") {\n                // find next open square in the word with wrapping\n                let newCoords = this.getNextEmptySpaceWrapping(grid, squareSelection)\n                if (newCoords !== null) {\n                    squareSelection.coords = newCoords\n                }\n            } else {\n                // go to next square\n                squareSelection.coords = [r,c+1]\n            }\n        } else {\n            if (wasEmpty || r+1 === boardSize || grid[r+1][c].value === \"_\") {\n                // find next open square in the word with wrapping\n                let newCoords = this.getNextEmptySpaceWrapping(grid, squareSelection)\n                if (newCoords !== null) {\n                    squareSelection.coords = newCoords\n                }\n            } else {\n                // go to next square\n                squareSelection.coords = [r+1,c]\n            }\n        }\n        return squareSelection\n    }\n\n    delete (grid, squareSelection) {\n        let [r,c] = squareSelection.coords\n        let boardSize = grid.length\n        let wasEmpty = grid[r][c].value === \"\"\n        if (squareSelection.direction === \"Across\") {\n            if (wasEmpty && c-1 >= 0 && grid[r][c-1].value !== \"_\") {\n                // move left a square and delete\n                grid[r][c-1].value = \"\"\n                squareSelection.coords = [r,c-1]\n            } else {\n                // delete this square and stay put\n                grid[r][c].value = \"\"\n            }\n        } else {\n            if (wasEmpty && r-1 >= 0 && grid[r-1][c].value !== \"_\") {\n                // move up a square and delete\n                grid[r-1][c].value = \"\"\n                squareSelection.coords = [r-1,c]\n            } else {\n                // delete this square and stay put\n                grid[r][c].value = \"\"\n            }\n        }\n        return squareSelection\n    }\n\n    tabOrEnter (grid, squareSelection, shiftKey, acrossClues, downClues) {\n        let allClues = acrossClues.concat(downClues)\n        let clueInd = allClues.findIndex(c => squareSelection.direction === \"Across\"\n                ? grid[squareSelection.coords[0]][squareSelection.coords[1]].acrossClueNum === c.number && c.direction === \"Across\"\n                : grid[squareSelection.coords[0]][squareSelection.coords[1]].downClueNum === c.number && c.direction === \"Down\")\n        let foundCoords = null\n        if (shiftKey) {\n            // going backwards\n            if (this.gridIsFull(grid)) {\n                // return beginning of prev word\n                clueInd--\n                if (clueInd < 0) {\n                    clueInd += allClues.length\n                    squareSelection.flipDirection()\n                }\n                squareSelection.coords = [allClues[clueInd].rowCoord, allClues[clueInd].colCoord]\n            } else {\n                // find empty square in previous word\n                while (foundCoords === null) {\n                    console.log(\"On clue: \" + allClues[clueInd].number + \" \" + allClues[clueInd].direction)\n                    clueInd--\n                    if (clueInd < 0) {\n                        clueInd += allClues.length\n                        squareSelection.flipDirection()\n                    }\n                    foundCoords = this.getFirstEmptySpace(grid, allClues[clueInd])\n                }\n                squareSelection.coords = foundCoords\n            }\n        } else {\n            // going forwards\n            if (this.gridIsFull(grid)) {\n                clueInd++\n                if (clueInd >= allClues.length) {\n                    clueInd -= allClues.length\n                    squareSelection.flipDirection()\n                }\n                squareSelection.coord = [allClues[clueInd].rowCoord, allClues[clueInd].colCoord]\n            } else {\n                // find empty square in next word\n                while (foundCoords === null) {\n                    console.log(\"On clue: \" + allClues[clueInd].number + \" \" + allClues[clueInd].direction)\n                    clueInd++\n                    if (clueInd >= allClues.length) {\n                        clueInd -= allClues.length\n                        squareSelection.flipDirection()\n                    }\n                    foundCoords = this.getFirstEmptySpace(grid, allClues[clueInd])\n                }\n                squareSelection.coords = foundCoords\n            }\n        }\n        console.log(\"New square selection: \" + squareSelection)\n        return squareSelection\n    }\n\n    leftArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Down\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            c--\n            if (c < 0) {\n                c += boardSize\n                r--\n                if (r < 0) {\n                    r += boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                c--\n                if (c < 0) {\n                    c += boardSize\n                    r--\n                    if (r < 0) {\n                        r += boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n\n    upArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Across\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            r--\n            if (r < 0) {\n                r += boardSize\n                c--\n                if (c < 0) {\n                    c += boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                r--\n                if (r < 0) {\n                    r += boardSize\n                    c--\n                    if (c < 0) {\n                        c += boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n\n    rightArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Down\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            c++\n            if (c >= boardSize) {\n                c -= boardSize\n                r++\n                if (r >= boardSize) {\n                    r -= boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                c++\n                if (c >= boardSize) {\n                    c -= boardSize\n                    r++\n                    if (r >= boardSize) {\n                        r -= boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n\n    downArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Across\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            r++\n            if (r >= boardSize) {\n                r -= boardSize\n                c++\n                if (c >= boardSize) {\n                    c -= boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                r++\n                if (r >= boardSize) {\n                    r -= boardSize\n                    c++\n                    if (c >= boardSize) {\n                        c -= boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n\n    gridIsFull (grid) {\n        let boardSize = grid.length\n        for (let r = 0; r < boardSize; r++) {\n            for (let c = 0; c < boardSize; c++) {\n                if (grid[r][c].value === \"\") {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    getFirstEmptySpace (grid, clue) {\n        let [row,col] = [clue.rowCoord, clue.colCoord]\n        if (clue.direction === \"Across\") {\n            for (let i = col; i < col + clue.answerLength; i++) {\n                if (grid[row][i].value === \"\") {\n                    return [row,i]\n                }\n            }\n        } else {\n            for (let i = row; i < row + clue.answerLength; i++) {\n                if (grid[i][col].value === \"\") {\n                    return [i,col]\n                }\n            }\n        }\n        return null\n    }\n\n    getNextEmptySpaceWrapping (grid, squareSelection) {\n        let [r, c] = squareSelection.coords\n        if (squareSelection.direction === \"Across\") {\n            do {\n                c++\n                if (c >= grid.length || grid[r][c].value === \"_\") {\n                    // go to beginning of word\n                    c = c - grid[r][c-1].acrossWordIndex - 1\n                }\n                if (grid[r][c].value === \"\") {\n                    return [r,c]\n                }\n            } while (c !== squareSelection.coords[1])\n        } else {\n            do {\n                r++\n                if (r >= grid.length || grid[r][c].value === \"_\") {\n                    // go to beginning of word\n                    r = r - grid[r-1][c].downWordIndex - 1\n                }\n                if (grid[r][c].value === \"\") {\n                    return [r,c]\n                }\n            } while (r !== squareSelection.coords[0])\n        }\n        return null\n    }\n}\n\nexport default new CrosswordKeyActions()"]},"metadata":{},"sourceType":"module"}