{"ast":null,"code":"class CrosswordKeyActions {\n  leftArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Down\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      c--;\n\n      if (c < 0) {\n        c += boardSize;\n        r--;\n\n        if (r < 0) {\n          r += boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        c--;\n\n        if (c < 0) {\n          c += boardSize;\n          r--;\n\n          if (r < 0) {\n            r += boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n  upArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Across\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      r--;\n\n      if (r < 0) {\n        r += boardSize;\n        c--;\n\n        if (c < 0) {\n          c += boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        r--;\n\n        if (r < 0) {\n          r += boardSize;\n          c--;\n\n          if (c < 0) {\n            c += boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n  rightArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Down\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      c++;\n\n      if (c >= boardSize) {\n        c -= boardSize;\n        r++;\n\n        if (r >= boardSize) {\n          r -= boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        c++;\n\n        if (c >= boardSize) {\n          c -= boardSize;\n          r++;\n\n          if (r >= boardSize) {\n            r -= boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n  downArrow(grid, squareSelection) {\n    if (squareSelection.direction === \"Across\") {\n      squareSelection.flipDirection();\n    } else {\n      let boardSize = grid.length;\n      let [r, c] = squareSelection.coords;\n      r++;\n\n      if (r >= boardSize) {\n        r -= boardSize;\n        c++;\n\n        if (c >= boardSize) {\n          c -= boardSize;\n        }\n      }\n\n      while (grid[r][c].value === \"_\") {\n        r++;\n\n        if (r >= boardSize) {\n          r -= boardSize;\n          c++;\n\n          if (c >= boardSize) {\n            c -= boardSize;\n          }\n        }\n      }\n\n      squareSelection.coords = [r, c];\n    }\n\n    return squareSelection;\n  }\n\n}\n\nexport default new CrosswordKeyActions();","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/libs/CrosswordKeyActions.js"],"names":["CrosswordKeyActions","leftArrow","grid","squareSelection","direction","flipDirection","boardSize","length","r","c","coords","value","upArrow","rightArrow","downArrow"],"mappings":"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","sourcesContent":["class CrosswordKeyActions {\n    leftArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Down\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            c--\n            if (c < 0) {\n                c += boardSize\n                r--\n                if (r < 0) {\n                    r += boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                c--\n                if (c < 0) {\n                    c += boardSize\n                    r--\n                    if (r < 0) {\n                        r += boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n\n    upArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Across\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            r--\n            if (r < 0) {\n                r += boardSize\n                c--\n                if (c < 0) {\n                    c += boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                r--\n                if (r < 0) {\n                    r += boardSize\n                    c--\n                    if (c < 0) {\n                        c += boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n\n    rightArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Down\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            c++\n            if (c >= boardSize) {\n                c -= boardSize\n                r++\n                if (r >= boardSize) {\n                    r -= boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                c++\n                if (c >= boardSize) {\n                    c -= boardSize\n                    r++\n                    if (r >= boardSize) {\n                        r -= boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n\n    downArrow (grid, squareSelection) {\n        if (squareSelection.direction === \"Across\") {\n            squareSelection.flipDirection()\n        } else {\n            let boardSize = grid.length\n            let [r,c] = squareSelection.coords\n            r++\n            if (r >= boardSize) {\n                r -= boardSize\n                c++\n                if (c >= boardSize) {\n                    c -= boardSize\n                }\n            }\n            while (grid[r][c].value === \"_\") {\n                r++\n                if (r >= boardSize) {\n                    r -= boardSize\n                    c++\n                    if (c >= boardSize) {\n                        c -= boardSize\n                    }\n                }\n            }\n            squareSelection.coords = [r,c]\n        }\n        return squareSelection\n    }\n}\n\nexport default new CrosswordKeyActions()"]},"metadata":{},"sourceType":"module"}