{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/CrosswordBoardApp.css';\nimport SquareSelection from '../libs/SquareSelection.js';\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx';\nimport CrosswordKeyActions from '../libs/CrosswordKeyActions.js';\nimport { faLevelUpAlt } from '@fortawesome/free-solid-svg-icons';\n\nclass CrosswordBoardApp extends Component {\n  constructor(props) {\n    super(props);\n    this.numbered = this.props.crossword.numbered;\n    this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.downClues = this.props.crossword.downClues.sort((c1, c2) => c1.number > c2.number ? 1 : -1);\n    this.clueRefMap = this.props.crossword.clueRefMap;\n    let currentSelection = new SquareSelection();\n    let i = 0;\n\n    while (this.props.crossword.numbered[0][i] === \"_\") {\n      i++;\n    }\n\n    currentSelection.coords = [0, i];\n    currentSelection.direction = \"Across\";\n    this.state = {\n      currentSelection: currentSelection,\n      grid: this.props.crossword.grid\n    };\n    this.clueClicked = this.clueClicked.bind(this);\n    this.boardSquareClicked = this.boardSquareClicked.bind(this);\n    this.getSelectedSquares = this.getSelectedSquares.bind(this);\n    this.getReferencedSquares = this.getReferencedSquares.bind(this);\n    this.getSquaresOfClue = this.getSquaresOfClue.bind(this);\n    this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"Crossword Board App is Mounting...\");\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Crossword Board App is Unmounting...\");\n    document.removeEventListener(\"keydown\", this.onKeyDown, false); // save state of grid\n  }\n\n  onKeyDown(event) {\n    console.log(event); // if special key pressed, allow default action\n\n    if (event.ctrlKey || event.altKey || event.metaKey) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (this.props.typingDisabled) {\n      return;\n    }\n\n    let selection = this.state.currentSelection;\n\n    if (event.which === 13 || event.which === 9) {\n      // enter or tab\n      selection = CrosswordKeyActions.tabOrEnter(this.state.grid, selection, event.shiftKey, this.acrossClues, this.downClues);\n    } else if (event.which === 8) {\n      // delete\n      selection = CrosswordKeyActions.delete(this.state.grid, selection);\n    } else if (event.which === 37) {\n      // left arrow\n      selection = CrosswordKeyActions.leftArrow(this.state.grid, selection);\n    } else if (event.which === 38) {\n      // up arrow\n      selection = CrosswordKeyActions.upArrow(this.state.grid, selection);\n    } else if (event.which === 39) {\n      // right arrow\n      selection = CrosswordKeyActions.rightArrow(this.state.grid, selection);\n    } else if (event.which === 40) {\n      // down arrow\n      selection = CrosswordKeyActions.downArrow(this.state.grid, selection);\n    } else if (event.which >= 65 && event.which <= 90) {\n      // a to z\n      selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key.toUpperCase());\n    } else if (event.which >= 48 && event.which <= 57) {\n      // 0 to 9 or the symbols on the same keys\n      selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key);\n    } else if (event.which >= 186 && event.which <= 222) {\n      // various symbols that we want to allow in case of special themed puzzle\n      // disallow the underscore because it is reserved for black squares\n      if (event.key === \"_\") {\n        return;\n      }\n\n      selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key);\n    }\n\n    this.setState({\n      currentSelection: selection\n    });\n  }\n\n  clueClicked(clue) {\n    let coords = CrosswordKeyActions.getFirstEmptySpace(this.state.grid, clue);\n\n    if (coords === null) {\n      coords = [clue.rowCoord, clue.colCoord];\n    }\n\n    let selection = this.state.currentSelection;\n    selection.coords = coords;\n    selection.direction = clue.direction;\n    this.setState({\n      currentSelection: selection\n    });\n  }\n\n  boardSquareClicked(square) {\n    if (square.value === \"_\") {\n      return;\n    }\n\n    let selection = this.state.currentSelection;\n\n    if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n      selection.flipDirection();\n    } else {\n      selection.coords = [square.rowCoord, square.colCoord];\n    }\n\n    this.setState({\n      currentSelection: selection\n    });\n  }\n\n  getSelectedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    let boardSquare = this.state.grid[coords[0]][coords[1]];\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum);\n      selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n    } else {\n      let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum);\n      selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n    }\n\n    return selectedCoordList;\n  }\n\n  getReferencedSquares(selection) {\n    const coords = selection.coords;\n    const direction = selection.direction;\n    let selectedCoordList = [];\n\n    if (direction === \"Across\") {\n      let clueNum = this.state.grid[coords[0]][coords[1]].acrossClueNum;\n      let clueKey = \"A\" + clueNum;\n\n      if (clueKey in this.clueRefMap) {\n        for (let key of this.clueRefMap[clueKey]) {\n          let clue;\n\n          if (key.substring(0, 1) === \"A\") {\n            clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          } else {\n            clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          }\n\n          selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n        }\n      }\n    } else {\n      let clueNum = this.state.grid[coords[0]][coords[1]].downClueNum;\n      let clueKey = \"D\" + clueNum;\n\n      if (clueKey in this.clueRefMap) {\n        for (let key of this.clueRefMap[clueKey]) {\n          let clue;\n\n          if (key.substring(0, 1) === \"A\") {\n            clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          } else {\n            clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length));\n          }\n\n          selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue));\n        }\n      }\n    }\n\n    return selectedCoordList;\n  }\n\n  getSquaresOfClue(clue) {\n    const [firstRow, firstCol] = [clue.rowCoord, clue.colCoord];\n    let coordList = [];\n\n    if (clue.direction === \"Across\") {\n      for (let i = firstCol; i < firstCol + clue.answerLength; i++) {\n        coordList.push([firstRow, i].toString());\n      }\n    } else {\n      for (let i = firstRow; i < firstRow + clue.answerLength; i++) {\n        coordList.push([i, firstCol].toString());\n      }\n    }\n\n    return coordList;\n  }\n\n  getSquareBackgroundColor(square, selection, highlightedSquares, referencedSquares) {\n    if (square.value === \"_\") return \"black\";\n    let thisSquareKey = [square.rowCoord, square.colCoord].toString();\n\n    if (highlightedSquares.includes(thisSquareKey)) {\n      if (thisSquareKey === selection.coords.toString()) {\n        return this.props.settings.colorScheme.colors[1];\n      } else {\n        return this.props.settings.colorScheme.colors[2];\n      }\n    } else if (referencedSquares.includes(thisSquareKey)) {\n      return this.props.settings.colorScheme.colors[0];\n    }\n\n    return \"white\";\n  }\n\n  render() {\n    const {\n      currentSelection,\n      grid\n    } = this.state;\n    let clueWidthPx = \"\" + (this.props.windowWidthPx - (this.props.boardWidthPx + 160) - 2) + \"px\";\n    const boardPx = this.props.boardWidthPx;\n    const boardSize = this.props.crossword.grid.length;\n    const rowPx = boardPx / boardSize;\n    const squarePx = rowPx - 1;\n    const highlightedSquares = this.getSelectedSquares(currentSelection);\n    const referencedSquares = this.getReferencedSquares(currentSelection);\n    const acrossClue = this.acrossClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum);\n    const downClue = this.downClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum);\n    let squareNumberStyle = {\n      fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`\n    };\n    let squareValueStyle = {\n      width: squarePx,\n      height: squarePx / 2,\n      marginTop: squarePx * 3 / 10,\n      fontSize: `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"19pt\"}`}`\n    };\n\n    if (boardPx > 700) {\n      // handle bigger board on large screens\n      squareNumberStyle[fontSize] = `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`;\n      squareValueStyle[fontSize] = `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"19pt\"}`}`;\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board-and-clues-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-board\",\n      style: {\n        width: boardPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, grid.map((row, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        height: rowPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 29\n      }\n    }, row.map((square, j) => /*#__PURE__*/React.createElement(\"div\", {\n      key: j,\n      className: \"crossword-square\",\n      onClick: () => {\n        this.boardSquareClicked(square);\n      },\n      style: {\n        width: squarePx,\n        height: squarePx,\n        backgroundColor: this.getSquareBackgroundColor(square, currentSelection, highlightedSquares, referencedSquares)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-number\",\n      style: {\n        fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 41\n      }\n    }, this.numbered[i][j] !== \"_\" && this.numbered[i][j] !== \"0\" ? this.numbered[i][j] : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-square-value\",\n      style: {\n        width: squarePx,\n        height: squarePx / 2,\n        marginTop: squarePx * 3 / 10,\n        fontSize: `${boardSize > 15 ? \"13pt\" : \"17pt\"}`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 41\n      }\n    }, square.value === \"\" || square.value === '_' ? '' : square.value)))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"crossword-clue-section\",\n      style: {\n        width: clueWidthPx,\n        height: boardPx\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Across\",\n      clueList: this.acrossClues,\n      selectedClue: acrossClue,\n      isMatchingDirection: currentSelection.direction === 'Across',\n      clueClicked: this.clueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(CrosswordClueScroll, {\n      listTitle: \"Down\",\n      clueList: this.downClues,\n      selectedClue: downClue,\n      isMatchingDirection: currentSelection.direction === 'Down',\n      clueClicked: this.clueClicked,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nCrosswordBoardApp.propTypes = {\n  crossword: PropTypes.object.isRequired,\n  typingDisabled: PropTypes.bool.isRequired,\n  boardWidthPx: PropTypes.number.isRequired,\n  windowWidthPx: PropTypes.number.isRequired,\n  settings: PropTypes.object.isRequired\n};\nexport default CrosswordBoardApp;","map":{"version":3,"sources":["/Users/nathanmajumder/crossword-react-app/crossword-app/src/components/CrosswordBoardApp.jsx"],"names":["React","Fragment","Component","PropTypes","SquareSelection","CrosswordClueScroll","CrosswordKeyActions","faLevelUpAlt","CrosswordBoardApp","constructor","props","numbered","crossword","acrossClues","sort","c1","c2","number","downClues","clueRefMap","currentSelection","i","coords","direction","state","grid","clueClicked","bind","boardSquareClicked","getSelectedSquares","getReferencedSquares","getSquaresOfClue","getSquareBackgroundColor","onKeyDown","componentDidMount","console","log","document","addEventListener","componentWillUnmount","removeEventListener","event","ctrlKey","altKey","metaKey","preventDefault","typingDisabled","selection","which","tabOrEnter","shiftKey","delete","leftArrow","upArrow","rightArrow","downArrow","alphaNumeric","key","toUpperCase","setState","clue","getFirstEmptySpace","rowCoord","colCoord","square","value","flipDirection","boardSquare","selectedCoordList","find","acrossClueNum","concat","downClueNum","clueNum","clueKey","substring","toString","length","firstRow","firstCol","coordList","answerLength","push","highlightedSquares","referencedSquares","thisSquareKey","includes","settings","colorScheme","colors","render","clueWidthPx","windowWidthPx","boardWidthPx","boardPx","boardSize","rowPx","squarePx","acrossClue","c","downClue","squareNumberStyle","fontSize","squareValueStyle","width","height","marginTop","map","row","j","backgroundColor","propTypes","object","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/CrosswordBoardApp.css'\nimport SquareSelection from '../libs/SquareSelection.js'\nimport CrosswordClueScroll from './CrosswordClueScroll.jsx'\nimport CrosswordKeyActions from '../libs/CrosswordKeyActions.js'\nimport { faLevelUpAlt } from '@fortawesome/free-solid-svg-icons'\n\nclass CrosswordBoardApp extends Component {\n    constructor (props) {\n        super(props)\n\n        this.numbered = this.props.crossword.numbered\n        this.acrossClues = this.props.crossword.acrossClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.downClues = this.props.crossword.downClues.sort((c1, c2) => (c1.number > c2.number) ? 1 : -1)\n        this.clueRefMap = this.props.crossword.clueRefMap\n        \n        let currentSelection = new SquareSelection()\n        let i = 0\n        while (this.props.crossword.numbered[0][i] === \"_\") {\n            i++\n        }\n        currentSelection.coords = [0,i]\n        currentSelection.direction = \"Across\"\n\n        this.state = {\n            currentSelection: currentSelection,\n            grid: this.props.crossword.grid\n        }\n\n        this.clueClicked = this.clueClicked.bind(this)\n        this.boardSquareClicked = this.boardSquareClicked.bind(this)\n\n        this.getSelectedSquares = this.getSelectedSquares.bind(this)\n        this.getReferencedSquares = this.getReferencedSquares.bind(this)\n        this.getSquaresOfClue = this.getSquaresOfClue.bind(this)\n        this.getSquareBackgroundColor = this.getSquareBackgroundColor.bind(this)\n\n        this.onKeyDown = this.onKeyDown.bind(this)\n    }\n\n    componentDidMount () {\n        console.log(\"Crossword Board App is Mounting...\")\n        document.addEventListener(\"keydown\", this.onKeyDown, false);\n    }\n\n    componentWillUnmount () {\n        console.log(\"Crossword Board App is Unmounting...\")\n        document.removeEventListener(\"keydown\", this.onKeyDown, false);\n        // save state of grid\n    }\n\n    onKeyDown (event) {\n        console.log(event)\n        // if special key pressed, allow default action\n        if (event.ctrlKey || event.altKey || event.metaKey) {\n            return\n        }\n        event.preventDefault()\n        if (this.props.typingDisabled) {\n            return\n        }\n        let selection = this.state.currentSelection\n        if (event.which === 13 || event.which === 9) {\n            // enter or tab\n            selection = CrosswordKeyActions.tabOrEnter(this.state.grid, selection, event.shiftKey, this.acrossClues, this.downClues)\n        } else if (event.which === 8) {\n            // delete\n            selection = CrosswordKeyActions.delete(this.state.grid, selection)\n        } else if (event.which === 37) {\n            // left arrow\n            selection = CrosswordKeyActions.leftArrow(this.state.grid, selection)\n        } else if (event.which === 38) {\n            // up arrow\n            selection = CrosswordKeyActions.upArrow(this.state.grid, selection)\n        } else if (event.which === 39) {\n            // right arrow\n            selection = CrosswordKeyActions.rightArrow(this.state.grid, selection)\n        } else if (event.which === 40) {\n            // down arrow\n            selection = CrosswordKeyActions.downArrow(this.state.grid, selection)\n        } else if (event.which >= 65 && event.which <= 90) {\n            // a to z\n            selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key.toUpperCase())\n        } else if (event.which >= 48 && event.which <= 57) {\n            // 0 to 9 or the symbols on the same keys\n            selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key)\n        } else if (event.which >= 186 && event.which <= 222) {\n            // various symbols that we want to allow in case of special themed puzzle\n            // disallow the underscore because it is reserved for black squares\n            if (event.key === \"_\") {\n                return\n            }\n            selection = CrosswordKeyActions.alphaNumeric(this.state.grid, selection, event.key)\n        }\n        \n        this.setState({\n            currentSelection: selection\n        })\n    }\n\n    clueClicked (clue) {\n        let coords = CrosswordKeyActions.getFirstEmptySpace(this.state.grid, clue)\n        if (coords === null) {\n            coords = [clue.rowCoord, clue.colCoord]\n        }\n        let selection = this.state.currentSelection\n        selection.coords = coords\n        selection.direction = clue.direction\n        this.setState({\n            currentSelection: selection\n        })\n    }\n\n    boardSquareClicked (square) {\n        if (square.value === \"_\") {\n            return\n        }\n        let selection = this.state.currentSelection\n        if (square.rowCoord === selection.coords[0] && square.colCoord === selection.coords[1]) {\n            selection.flipDirection()\n        } else {\n            selection.coords = [square.rowCoord, square.colCoord]\n        }\n        this.setState({\n            currentSelection: selection\n        })\n    }\n\n    getSelectedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        let boardSquare = this.state.grid[coords[0]][coords[1]]\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clue = this.acrossClues.find(clue => clue.number === boardSquare.acrossClueNum)\n            selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n        } else {\n            let clue = this.downClues.find(clue => clue.number === boardSquare.downClueNum)\n            selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n        }\n        return selectedCoordList\n    }\n\n    getReferencedSquares (selection) {\n        const coords = selection.coords\n        const direction = selection.direction\n        let selectedCoordList = []\n        if (direction === \"Across\") {\n            let clueNum = this.state.grid[coords[0]][coords[1]].acrossClueNum\n            let clueKey = \"A\" + clueNum\n            if (clueKey in this.clueRefMap) {\n                for (let key of this.clueRefMap[clueKey]) {\n                    let clue\n                    if (key.substring(0,1) === \"A\") {\n                        clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1,key.length))\n                    } else {\n                        clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length))\n                    }\n                    selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n                }\n            }\n        } else {\n            let clueNum = this.state.grid[coords[0]][coords[1]].downClueNum\n            let clueKey = \"D\" + clueNum\n            if (clueKey in this.clueRefMap) {\n                for (let key of this.clueRefMap[clueKey]) {\n                    let clue\n                    if (key.substring(0,1) === \"A\") {\n                        clue = this.acrossClues.find(clue => clue.number.toString() === key.substring(1,key.length))\n                    } else {\n                        clue = this.downClues.find(clue => clue.number.toString() === key.substring(1, key.length))\n                    }\n                    selectedCoordList = selectedCoordList.concat(this.getSquaresOfClue(clue))\n                }\n            }\n        }\n        return selectedCoordList\n    }\n\n    getSquaresOfClue (clue) {\n        const [firstRow, firstCol] = [clue.rowCoord, clue.colCoord]\n        let coordList = []\n        if (clue.direction === \"Across\") {\n            for (let i = firstCol; i < firstCol + clue.answerLength; i++) {\n                coordList.push([firstRow, i].toString())\n            }\n        } else {\n            for (let i = firstRow; i < firstRow + clue.answerLength; i++) {\n                coordList.push([i, firstCol].toString())\n            }\n        }\n        return coordList\n    }\n\n    getSquareBackgroundColor (square, selection, highlightedSquares, referencedSquares) {\n        if (square.value === \"_\") return \"black\"\n        let thisSquareKey = [square.rowCoord, square.colCoord].toString()\n        if (highlightedSquares.includes(thisSquareKey)) {\n            if (thisSquareKey === selection.coords.toString()) {\n                return this.props.settings.colorScheme.colors[1]\n            } else {\n                return this.props.settings.colorScheme.colors[2]\n            }\n        } else if (referencedSquares.includes(thisSquareKey)) {\n            return this.props.settings.colorScheme.colors[0]\n        }\n        return \"white\"\n    }\n\n    render () {\n        const { currentSelection, grid } = this.state\n        let clueWidthPx = \"\" + (this.props.windowWidthPx - (this.props.boardWidthPx + 160) - 2) + \"px\"\n\n        const boardPx = this.props.boardWidthPx\n        const boardSize = this.props.crossword.grid.length\n        const rowPx = boardPx / boardSize\n        const squarePx = rowPx - 1\n\n        const highlightedSquares = this.getSelectedSquares(currentSelection)\n        const referencedSquares = this.getReferencedSquares(currentSelection)\n\n        const acrossClue = this.acrossClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].acrossClueNum)\n        const downClue = this.downClues.find(c => c.number === grid[currentSelection.coords[0]][currentSelection.coords[1]].downClueNum)\n\n        let squareNumberStyle = {\n            fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`\n        }\n        let squareValueStyle = {\n            width: squarePx,\n            height: squarePx/2,\n            marginTop: squarePx*3/10,\n            fontSize: `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"19pt\"}`}`\n        }\n\n        if (boardPx > 700) {\n            // handle bigger board on large screens\n            squareNumberStyle[fontSize] = `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`\n            squareValueStyle[fontSize] = `${boardSize > 15 ? \"13pt\" : `${boardSize > 10 ? \"17pt\" : \"19pt\"}`}`\n        }\n\n        return (\n            <Fragment>\n                <div className=\"crossword-board-and-clues-wrapper\">\n                    <div className=\"crossword-board\" style={{ width : boardPx, height : boardPx }}>\n                        {grid.map( (row, i) =>\n                            <div key={i} style={{height : rowPx}}>\n                                {row.map( (square, j) => \n                                    <div key={j} className={\"crossword-square\"} onClick={() => { this.boardSquareClicked(square) }}\n                                            style={{width : squarePx, height : squarePx, \n                                                backgroundColor : this.getSquareBackgroundColor(square, currentSelection, highlightedSquares, referencedSquares)}}>\n                                        <div className=\"board-square-number\" \n                                            style={{fontSize: `${boardSize > 15 ? \"6pt\" : `${boardSize > 10 ? \"9pt\" : \"12pt\"}`}`}}>\n                                            {this.numbered[i][j] !== \"_\" && this.numbered[i][j] !== \"0\" ? this.numbered[i][j] : \"\"}</div>\n                                        <div className=\"board-square-value\" style={{width : squarePx, height : squarePx/2, \n                                                marginTop: squarePx*3/10, fontSize: `${boardSize > 15 ? \"13pt\" : \"17pt\"}`}}>\n                                            {square.value === \"\" || square.value === '_' ? '' : square.value}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n\n                        )}\n                    </div>\n                    <div className=\"crossword-clue-section\" style={{width : clueWidthPx, height : boardPx}}>\n                        <CrosswordClueScroll \n                            listTitle={\"Across\"}\n                            clueList={this.acrossClues}\n                            selectedClue={acrossClue}\n                            isMatchingDirection={currentSelection.direction === 'Across'}\n                            clueClicked={this.clueClicked}\n                            settings={this.props.settings}/>\n                        <CrosswordClueScroll \n                            listTitle={\"Down\"}\n                            clueList={this.downClues}\n                            selectedClue={downClue}\n                            isMatchingDirection={currentSelection.direction === 'Down'}\n                            clueClicked={this.clueClicked}\n                            settings={this.props.settings}/>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nCrosswordBoardApp.propTypes = {\n    crossword: PropTypes.object.isRequired,\n    typingDisabled: PropTypes.bool.isRequired,\n    boardWidthPx: PropTypes.number.isRequired,\n    windowWidthPx: PropTypes.number.isRequired,\n    settings: PropTypes.object.isRequired\n}\n\nexport default CrosswordBoardApp"]},"metadata":{},"sourceType":"module"}